CREATE TABLE ACCOUNTS (
    BANK_ACCOUNT_ID NUMBER,
    BALANCE NUMBER(10,2),
    USER_ID NUMBER,
    CONSTRAINT PK_ACCOUNT PRIMARY KEY (BANK_ACCOUNT_ID)
);
/

CREATE TABLE REGISTERED_USERS (
    USER_ID NUMBER,
    USERNAME VARCHAR2(50) UNIQUE,   --MAKE USERNAMES UNIQUE
    PASS VARCHAR2(50),
    FIRSTNAME VARCHAR2(50),
    LASTNAME VARCHAR2(50),
    IS_SUPERUSER BIT,            --SET TO 1 IF USER IS SUPERUSER, 0 IF REGULAR USER
    CONSTRAINT PK_USER PRIMARY KEY (USER_ID)
);
/

CREATE TABLE TRANSACTIONS (
    TRANSACTION_ID NUMBER,
    USER_ID NUMBER,
    BANK_ACCOUNT_ID NUMBER,
    IS_WITHDRAWL BIT,           --SET TO 1 IF WITHDRAWL, SET TO 0 IF DEPOSIT
    AMOUNT NUMBER(10,2),
    CONSTRAINT PK_TRANSACTION PRIMARY KEY (TRANSACTION_ID)
);
/

--ADD FOREIGN KEY INTO ACCOUNTS THAT TIES IT TO A SPECIFIC USER
ALTER TABLE ACCOUNTS
ADD CONSTRAINT FK_ACCOUNTS_REGISTERED_USERS
FOREIGN KEY (USER_ID) REFERENCES REGISTERED_USERS(USER_ID);


--SEQUENCES FOR PRIMARY KEY GENERATION

--ACCOUNT PRIMARY KEY
CREATE SEQUENCE ACCOUNT_KEY_SEQ
MINVALUE 0
START WITH 0
INCREMENT BY 1;
/

--USER PRIMARY KEY
CREATE SEQUENCE USER_KEY_SEQ
MINVALUE 0
START WITH 0
INCREMENT BY 1;
/

--TRANSACTION PRIMARY KEY
CREATE SEQUENCE TRANSACTION_KEY_SEQ
MINVALUE 0
START WITH 0
INCREMENT BY 1;
/




--ACCOUNT MANAGEMENT PROCEDURES

--CREATE USER
CREATE OR REPLACE PROCEDURE CREATE_USER (THE_USERNAME IN VARCHAR2, THE_PASSWORD IN VARCHAR2, FNAME IN VARCHAR2, LNAME IN VARCHAR2) AS
    PRIM_KEY NUMBER;
BEGIN
    SELECT USER_KEY_SEQ.NEXTVAL INTO PRIM_KEY FROM DUAL;
    INSERT INTO REGISTERED_USERS VALUES (PRIM_KEY,THE_USERNAME,THE_PASSWORD,FNAME,LNAME,0);
END;
/

--VIEW USER ACCOUNTS
CREATE OR REPLACE PROCEDURE VIEW_ACCOUNTS (THE_USER IN NUMBER) AS
BEGIN
    SELECT * FROM ACCOUNTS WHERE USER_ID=THE_USER;
END;
/


--VIEW ACCOUNT BALANCE
CREATE OR REPLACE PROCEDURE VIEW_BALANCE (THE_ACCOUNT IN NUMBER) AS
BEGIN
    SELECT BALANCE FROM ACCOUNTS WHERE (BANK_ACCOUNT_ID=THE_ACCOUNT);
END; 
/

--CREATE AN ACCOUNT WITH A STARTING BALANCE, TIED TO A SPECIFIED USER
CREATE OR REPLACE PROCEDURE CREATE_ACCOUNT (BAL IN NUMBER, THE_USER IN NUMBER) AS
    PRIM_KEY NUMBER;
BEGIN
    SELECT ACCOUNT_KEY_SEQ.NEXTVAL INTO PRIM_KEY FROM DUAL;
    INSERT INTO ACCOUNTS VALUES (PRIM_KEY, BAL, THE_USER);
END;  
/

--DELETE ACCOUNT IF EMPTY. ONLY CALL IF BALANCE = $0.00
CREATE OR REPLACE PROCEDURE DELETE_ACCOUNT (THE_ACCOUNT_ID IN NUMBER) AS
BEGIN
    DELETE FROM ACCOUNTS WHERE BANK_ACCOUNT_ID=THE_ACCOUNT_ID AND BALANCE=0;
END;
/

--WITHDRAW
CREATE OR REPLACE PROCEDURE WITHDRAW (THE_ACCOUNT_ID IN NUMBER, THE_AMOUNT IN NUMBER) AS
BEGIN
    UPDATE ACCOUNTS SET BALANCE=BALANCE-THE_AMOUNT WHERE BANK_ACCOUNT_ID=THE_ACCOUNT_ID;
END;
/

--DEPOSIT
CREATE OR REPLACE PROCEDURE DEPOSIT (THE_ACCOUNT_ID IN NUMBER, THE_AMOUNT IN NUMBER) AS
BEGIN
    UPDATE ACCOUNTS SET BALANCE=BALANCE+THE_AMOUNT WHERE BANK_ACCOUNT_ID=THE_ACCOUNT_ID;
END;
/
