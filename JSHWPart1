var homework = {};

/*
 1. Return the nth fibonacci number

 f(0) = 0
 f(1) = 1
 f(10) = 55
*/

function fiboHelper(last, curr, n) {
	n--;
	if (n === 0) {
		return curr;
	}
	return fiboHelper(curr, (curr + last), n);
};

homework.fibonacci = function(n){
	var curr = 1;
	var last = 0;

	if (n === 0) {
		return 0;
	}

	if (n === 1) {
		return 1
	}

	return fiboHelper(0, 1, n);

};

/*
 2. Sort array of integers

 f([2,4,5,1,3,1]) = [1,1,2,3,4,5]

 Don't use the Array sort() method... that would be lame.
*/
homework.sort = function(array) {

	var temp;
	var notSorted = true;
	var idx;

	while(notSorted) {
		notSorted = false;
		for (idx = 0; idx < (array.length - 1); idx++) {
			if (array[idx] > array[(idx + 1)]) {
				temp = array[idx];
				array[idx] = array[(idx + 1)];
				array[(idx + 1)] = temp;
				notSorted = true;
			}
		}
	}
	console.log(array);

};

/*
 3. Return the factorial of n

 f(0) = 1
 f(1) = 1
 f(3) = 6
*/

function factHelper(n) {
	if (n === 1 || n === 0) {
		return 1;
	}

	return n * (factHelper(n - 1));
};

homework.factorial = function(n){

	return factHelper(n);

};

/*
 4. Rotate left

 Given array, rotate left n times and return array

 f([1,2,3,4,5], 1) = [2,3,4,5,1]
 f([1,2,3,4,5], 6) = [2,3,4,5,1]
 f([1,2,3,4,5], 3) = [4,5,1,2,3]

*/
homework.rotateLeft = function(array, n) {
	var idx;
	var jdx;
	var lastArr = array;
	var currArr = [];

	for (idx = 0; idx < n; idx++){
		for (jdx = 1; jdx < lastArr.length; jdx++){
			currArr[jdx - 1] = lastArr[jdx];
		}
		currArr[lastArr.length - 1] = lastArr[0];
		lastArr = currArr;
		currArr = [];
	}

	return lastArr;
};

/*
 5. Balanced Brackets

 A bracket is any one of the following: (, ), {, }, [, or ]

 The following are balanced brackets:
    ()
    ()()
    (())
    ({[]})

 The following are NOT balanced brackets:
 (
 )
 (()
 ([)]

 Return true if balanced
 Return false if not balanced
*/
homework.balancedBrackets = function(bracketsString){

	var stackPtr = 0;
	var stack = [];
	var idx = 0;
	var currChar;

	if (bracketsString.length % 2 != 0){
		return false;
	}

	for (;idx < bracketsString.length; idx++) {
		currChar = bracketsString.charAt(idx);
		if (currChar == "(" || currChar == "[" || currChar == "{") {
			stack[stackPtr] = currChar;
			stackPtr++;
		}
		else if (currChar == ")"){
			if (stack[stackPtr - 1] != "("){
				return false;
			}
			stackPtr--;
		}
		else if (currChar == "]"){
			if (stack[stackPtr - 1] != "["){
				return false;
			}
			stackPtr--;
		}
		else if (currChar == "}"){
			if (stack[stackPtr - 1] != "{"){
				return false;
			}
			stackPtr--;
		}
	}
	return true;

};
