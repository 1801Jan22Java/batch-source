DROP TABLE BANK_USER;
DROP TABLE BANK_ACCOINT;
/

CREATE TABLE BANK_USER (
  USER_ID INTEGER PRIMARY KEY,
  USERNAME VARCHAR2(100),
  PASS_WORD VARCHAR2(100),
  FIRST_NAME VARCHAR2(100),
  LAST_NAME VARCHAR2(100)
);
/

CREATE TABLE BANK_ACCOUNT (
  ACCOUNT_ID INTEGER PRIMARY KEY,
  USER_ID INTEGER,
  BALANCE DOUBLE PRECISION,
  ACCOUNT_NAME VARCHAR2(100)
);
/
--FOREIGN KEY CONSTRAINTS

ALTER TABLE BANK_ACCOUNT
ADD CONSTRAINT FK_BANK_ACCOUNT_BANK_USER
FOREIGN KEY (USER_ID) REFERENCES BANK_USER(USER_ID)
ON DELETE SET NULL;

--ADD CHECK CONSTRAINTS

ALTER TABLE BANK_ACCOUNT
ADD CONSTRAINT CK_BALANCE_NON_NEGATIVE CHECK (BALANCE >= 0);

ALTER TABLE BANK_USER
ADD CONSTRAINT CK_MIN_PASSWORD_LENGTH CHECK (LENGTH(PASS_WORD) >= 8);

--ADD UNIQUE CONSTRAINTS 

ALTER TABLE BANK_USER
ADD CONSTRAINT UQ_USERNAME UNIQUE (USERNAME);
/

--SEQUENCES 

CREATE SEQUENCE SQ_BANK_USER_PK
START WITH 5
INCREMENT BY 2;
/
CREATE SEQUENCE SQ_BANK_ACCOUNT_PK
START WITH 5
INCREMENT BY 3;
/

--CREATE BEFORE INSERT TRIGGERS 

CREATE OR REPLACE TRIGGER TR_INSERT_BANK_USER
BEFORE INSERT ON BANK_USER
FOR EACH ROW
BEGIN
  SELECT SQ_BANK_USER_PK.NEXTVAL INTO :NEW.USER_ID FROM DUAL;
END;
/
CREATE OR REPLACE TRIGGER TR_INSERT_BANK_ACCOUNT
BEFORE INSERT ON BANK_ACCOUNT
FOR EACH ROW
BEGIN
  SELECT SQ_BANK_ACCOUNT_PK.NEXTVAL INTO :NEW.ACCOUNT_ID FROM DUAL;
END;
/

CREATE OR REPLACE PROCEDURE CREATE_USER (
USER_NAME IN BANK_USER.USERNAME%TYPE,
PASS IN BANK_USER.PASS_WORD%TYPE,
FIRSTNAME IN BANK_USER.FIRST_NAME%TYPE,
LASTNAME IN BANK_USER.LAST_NAME%TYPE
)
AS
BEGIN
    INSERT INTO BANK_USER (USERNAME, PASS_WORD, FIRST_NAME, LAST_NAME)
    VALUES (USER_NAME, PASS, FIRSTNAME, LASTNAME);
    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE CREATE_ACCOUNT (
ID_USER IN BANK_USER.USER_ID%TYPE,
CURR_BALANCE IN BANK_ACCOUNT.BALANCE%TYPE,
NAME IN BANK_ACCOUNT.ACCOUNT_NAME%TYPE
)
AS
BEGIN
    INSERT INTO BANK_ACCOUNT (USER_ID, BALANCE, ACCOUNT_NAME) VALUES (ID_USER, CURR_BALANCE, NAME);
    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE REMOVE_ACCOUNT (
ACC_ID IN BANK_ACCOUNT.ACCOUNT_ID%TYPE
)
AS
BEGIN
    DELETE FROM BANK_ACCOUNT WHERE ACCOUNT_ID=ACC_ID;
    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE UPDATE_BY_AMOUNT (
ACC_ID IN BANK_ACCOUNT.ACCOUNT_ID%TYPE,
ADDED_BALANCE IN BANK_ACCOUNT.BALANCE%TYPE
)
AS
BEGIN
    UPDATE BANK_ACCOUNT SET BALANCE=(BALANCE + ADDED_BALANCE) WHERE ACCOUNT_ID=ACC_ID;
    COMMIT;
END;
/

INSERT INTO BANK_USER (USERNAME, PASS_WORD, FIRST_NAME, LAST_NAME)
VALUES ('admin', '123password!', 'Ahmed', 'Awwad');
INSERT INTO BANK_USER (USERNAME, PASS_WORD, FIRST_NAME, LAST_NAME)
VALUES ('username', 'password', 'Chuck', 'Norris');
INSERT INTO BANK_USER (USERNAME, PASS_WORD, FIRST_NAME, LAST_NAME)
VALUES ('username!', 'password', 'Chuck', 'Boris');
INSERT INTO BANK_USER (USERNAME, PASS_WORD, FIRST_NAME, LAST_NAME)
VALUES ('username?', 'password', 'Chuck', 'Horace');

SELECT * FROM BANK_ACCOUNT;
