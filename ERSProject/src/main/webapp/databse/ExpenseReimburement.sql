--
--Employee Tables
--

CREATE TABLE ERS_EMPLOYEE(
EMP_ID INT,
EMAIL VARCHAR(255) UNIQUE,--used as their login
USERPASS VARCHAR(255),
PRIMARY KEY (EMP_ID)
);

-- Sequence for EMP_ID
CREATE SEQUENCE EMP_ID_SEQUENCE
MINVALUE 0
START WITH 1000
INCREMENT BY 1;

-- Trigger for EMP_ID_SEQUENCE
CREATE OR REPLACE TRIGGER AFTER_NEW_ERS_EMPLOYEE
    BEFORE INSERT ON ERS_EMPLOYEE
    FOR EACH ROW
    BEGIN
        IF :new.EMP_ID IS NULL THEN
            SELECT EMP_ID_SEQUENCE.NEXTVAL INTO :new.EMP_ID FROM DUAL;
        END IF;
    END;
/

--
--Manager Table
-- Managers are also employees

CREATE TABLE ERS_MANAGER(
MANAGER_ID INT,
EMP_ID INT,
PRIMARY KEY (MANAGER_ID)
);

--Foreign Key
ALTER TABLE ERS_MANAGER ADD CONSTRAINT FK_EMP_ID_MANAGER
    FOREIGN KEY (EMP_ID) REFERENCES ERS_EMPLOYEE(EMP_ID);

-- Sequence for MANAGER_ID
CREATE SEQUENCE MANAGER_ID_SEQUENCE
MINVALUE 0
START WITH 1000
INCREMENT BY 1;

-- Trigger for MANAGER_ID_SEQUENCE
CREATE OR REPLACE TRIGGER AFTER_NEW_MANAGER
    BEFORE INSERT ON ERS_MANAGER
    FOR EACH ROW
    BEGIN
        IF :new.MANAGER_ID IS NULL THEN
            SELECT MANAGER_ID_SEQUENCE.NEXTVAL INTO :new.MANAGER_ID FROM DUAL;
        END IF;
    END;
/

--
--Requests
--
drop table ers_request;

CREATE TABLE ERS_REQUEST(
REQUEST_ID INT,
EMP_ID INT,
TITLE VARCHAR(255),
AMOUNT FLOAT,
R_DESCRIPTION VARCHAR(255),--Enough?
R_DATE TIMESTAMP,
RECIEPT BLOB,
WALLET_ID INT,
STATUS INT,
MANAGER_ID INT,
PRIMARY KEY (REQUEST_ID)
);

--Foreign Key
ALTER TABLE ERS_REQUEST ADD CONSTRAINT FK_EMP_ID_REQUEST
    FOREIGN KEY (WALLET_ID) REFERENCES ERS_WALLET(WALLET_ID);

ALTER TABLE ERS_REQUEST ADD CONSTRAINT FK_WAL_ID_REQUEST
    FOREIGN KEY (EMP_ID) REFERENCES ERS_EMPLOYEE(EMP_ID);
    
-- Sequence for REQUEST_ID
CREATE SEQUENCE REQUEST_ID_SEQUENCE
MINVALUE 0
START WITH 0
INCREMENT BY 1;

-- Trigger for REQUEST_ID_SEQUENCE
CREATE OR REPLACE TRIGGER AFTER_NEW_REQUEST
    BEFORE INSERT ON ERS_REQUEST
    FOR EACH ROW
    BEGIN
        IF :new.REQUEST_ID IS NULL THEN
            SELECT REQUEST_ID_SEQUENCE.NEXTVAL INTO :new.REQUEST_ID FROM DUAL;
        END IF;
    END;
/

--
--Wallet types - Might not be used
--TODO::Managers can add wallet types?
CREATE TABLE ERS_WALLET_TYPE(
WALLET_TYPE_ID INT,
WALLET_NAME VARCHAR(255),
WALLET_SYMBOL VARCHAR(255),
--Icon?
PRIMARY KEY (WALLET_TYPE_ID)
);

-- Sequence for WALLET_ID
CREATE SEQUENCE WALLET_TYPE_ID_SEQUENCE
MINVALUE 0
START WITH 1000
INCREMENT BY 1;

-- Trigger for WALLET_ID_SEQUENCE
CREATE OR REPLACE TRIGGER AFTER_NEW_WALLET_TYPE
    BEFORE INSERT ON ERS_WALLET_TYPE
    FOR EACH ROW
    BEGIN
        IF :new.WALLET_TYPE_ID IS NULL THEN
            SELECT WALLET_TYPE_ID_SEQUENCE.NEXTVAL INTO :new.WALLET_TYPE_ID FROM DUAL;
        END IF;
    END;
/

--
--Wallets - Might not be used
--

CREATE TABLE ERS_WALLET(
WALLET_ID INT,
EMP_ID INT,
WALLET_NAME VARCHAR(255),
WALLET_ADDRESS VARCHAR(255),
WALLET_TYPE_ID INT,
PRIMARY KEY (WALLET_ID)
);

-- Sequence for WALLET_ID
CREATE SEQUENCE WALLET_ID_SEQUENCE
MINVALUE 0
START WITH 1000
INCREMENT BY 1;

--Foreign Key
ALTER TABLE ERS_WALLET ADD CONSTRAINT FK_WALLET_TYPE_ID_WALLET
    FOREIGN KEY (WALLET_TYPE_ID) REFERENCES ERS_WALLET_TYPE(WALLET_TYPE_ID);
    
    --Foreign Key
ALTER TABLE ERS_WALLET ADD CONSTRAINT FK_EMP_ID_WALLET
    FOREIGN KEY (EMP_ID) REFERENCES ERS_EMPLOYEE(EMP_ID);