--TABLES
CREATE TABLE BANK_USER
(
    USERID NUMBER NOT NULL,
    ACCOUNTID NUMBER,
    USERNAME VARCHAR2(20) NOT NULL,
    PASSWORD VARCHAR2(20) NOT NULL,
    IS_SUPER NUMBER(1),
    CONSTRAINT PK_USERID PRIMARY KEY  (USERID)
);

CREATE TABLE ACCOUNT
(
    ACCOUNTID NUMBER,
    USERID NUMBER,
    BALANCE NUMBER,
    CONSTRAINT PK_ACCOUNTID PRIMARY KEY (ACCOUNTID)
);

--CONSTRAINTS

ALTER TABLE BANK_USER ADD CONSTRAINT FK_ACCOUNTID
    FOREIGN KEY (ACCOUNTID) REFERENCES ACCOUNT (ACCOUNTID)
    ON DELETE CASCADE;
    
ALTER TABLE ACCOUNT ADD CONSTRAINT FK_USERID
    FOREIGN KEY (USERID) REFERENCES BANK_USER (USERID)
    ON DELETE CASCADE;

COMMIT;

--SEQUENCES

CREATE SEQUENCE SQ_BANK_USER_PK
START WITH 1000
INCREMENT BY 1;
/

CREATE SEQUENCE SQ_ACCOUNT_PK
START WITH 1000
INCREMENT BY 1;
/

--TRIGGERS

CREATE OR REPLACE TRIGGER TR_INSERT_USER
BEFORE INSERT ON BANK_USER
FOR EACH ROW
BEGIN
  SELECT SQ_BANK_USER_PK.NEXTVAL INTO :NEW.USERID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER TR_INSERT_ACCOUNT
BEFORE INSERT ON ACCOUNT
FOR EACH ROW
BEGIN
  SELECT SQ_ACCOUNT_PK.NEXTVAL INTO :NEW.ACCOUNTID FROM DUAL;
END;
/

--STORED PROCEDURES
CREATE OR REPLACE PROCEDURE DEPOSIT(AMOUNT IN NUMBER, ACC_ID IN NUMBER)
AS
BEGIN
    UPDATE ACCOUNT SET BALANCE = (BALANCE+AMOUNT)
    WHERE ACCOUNT.ACCOUNTID = ACC_ID;
END;
/

CREATE OR REPLACE PROCEDURE WITHDRAW(AMOUNT IN NUMBER, ACC_ID IN NUMBER)
AS
BEGIN
    UPDATE ACCOUNT SET BALANCE = (BALANCE-AMOUNT)
    WHERE ACCOUNT.ACCOUNTID = ACC_ID;
END;
/

INSERT INTO BANK_USER(USERNAME, PASSWORD, IS_SUPER) VALUES('admin','admin', 1);



