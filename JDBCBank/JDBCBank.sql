CREATE TABLE BANKUSER (
    ID NUMBER(10) PRIMARY KEY,          -- USER NUMBER
    NAME VARCHAR2(100) NOT NULL UNIQUE, -- LOGIN NAME
    PW VARCHAR2(20) NOT NULL CHECK (LENGTH(PW)>=4),           -- LOGIN PASSWORD
    LV NUMBER(1) DEFAULT 1              -- 0: SUPER USER / 1:BASIC USER
);

CREATE TABLE BANKACCOUNT (
    ID NUMBER(10) PRIMARY KEY,
    USER_ID NUMBER(10) NOT NULL,
    BALANCE NUMBER(20) DEFAULT 0 CHECK(BALANCE >=0),        -- THIS ACCOUNT DOESN'T ALLOW OVER-WITHDRAW
    CONSTRAINT BANKACCOUNT_FK FOREIGN KEY (USER_ID) REFERENCES BANKUSER(ID)
);

CREATE SEQUENCE BANKUSER_SEQ
INCREMENT BY 1
START WITH 1;

INSERT INTO BANKUSER (ID, NAME, PW, LV) VALUES (BANKUSER_SEQ.NEXTVAL, 'SUPERUSER', '1234', 0);  -- SUPER USER
INSERT INTO BANKUSER (ID, NAME, PW) VALUES (BANKUSER_SEQ.NEXTVAL, 'BASICUSER1', '0002');  -- BASIC USER
INSERT INTO BANKUSER (ID, NAME, PW) VALUES (BANKUSER_SEQ.NEXTVAL, 'BASICUSER3', '0003');  -- BASIC USER
INSERT INTO BANKUSER (ID, NAME, PW) VALUES (BANKUSER_SEQ.NEXTVAL, 'BASICUSER4', '0004');  -- BASIC USER
INSERT INTO BANKUSER (ID, NAME, PW) VALUES (BANKUSER_SEQ.NEXTVAL, 'BASICUSER5', '0005');  -- BASIC USER
INSERT INTO BANKUSER (ID, NAME, PW) VALUES (BANKUSER_SEQ.NEXTVAL, 'BASICUSER6', '0006');  -- BASIC USER
INSERT INTO BANKUSER (ID, NAME, PW) VALUES (BANKUSER_SEQ.NEXTVAL, 'BASICUSER7', '0007');  -- BASIC USER
INSERT INTO BANKUSER (ID, NAME, PW) VALUES (BANKUSER_SEQ.NEXTVAL, 'BASICUSER8', '0008');  -- BASIC USER
INSERT INTO BANKUSER (ID, NAME, PW) VALUES (BANKUSER_SEQ.NEXTVAL, 'BASICUSER9', '0009');  -- BASIC USER
INSERT INTO BANKUSER (ID, NAME, PW) VALUES (BANKUSER_SEQ.NEXTVAL, 'BASICUSER10', '00010');  -- BASIC USER
INSERT INTO BANKUSER (ID, NAME, PW) VALUES (BANKUSER_SEQ.NEXTVAL, 'BASICUSER11', '00011');  -- BASIC USER

CREATE SEQUENCE BANKACCOUNT_SEQ
INCREMENT BY 1
START WITH 1000;

INSERT INTO BANKACCOUNT(ID, USER_ID, BALANCE) VALUES (BANKACCOUNT_SEQ.NEXTVAL, 1, 0);
INSERT INTO BANKACCOUNT(ID, USER_ID, BALANCE) VALUES (BANKACCOUNT_SEQ.NEXTVAL, 1, 100);
INSERT INTO BANKACCOUNT(ID, USER_ID, BALANCE) VALUES (BANKACCOUNT_SEQ.NEXTVAL, 2, 200);
INSERT INTO BANKACCOUNT(ID, USER_ID, BALANCE) VALUES (BANKACCOUNT_SEQ.NEXTVAL, 2, 400);
INSERT INTO BANKACCOUNT(ID, USER_ID, BALANCE) VALUES (BANKACCOUNT_SEQ.NEXTVAL, 3, 1000);
INSERT INTO BANKACCOUNT(ID, USER_ID, BALANCE) VALUES (BANKACCOUNT_SEQ.NEXTVAL, 4, 2000);
INSERT INTO BANKACCOUNT(ID, USER_ID, BALANCE) VALUES (BANKACCOUNT_SEQ.NEXTVAL, 5, 10);
INSERT INTO BANKACCOUNT(ID, USER_ID, BALANCE) VALUES (BANKACCOUNT_SEQ.NEXTVAL, 5, 100);
INSERT INTO BANKACCOUNT(ID, USER_ID, BALANCE) VALUES (BANKACCOUNT_SEQ.NEXTVAL, 5, 0);
INSERT INTO BANKACCOUNT(ID, USER_ID, BALANCE) VALUES (BANKACCOUNT_SEQ.NEXTVAL, 6, 1200);
INSERT INTO BANKACCOUNT(ID, USER_ID, BALANCE) VALUES (BANKACCOUNT_SEQ.NEXTVAL, 6, 2200);
INSERT INTO BANKACCOUNT(ID, USER_ID, BALANCE) VALUES (BANKACCOUNT_SEQ.NEXTVAL, 7, 0);
INSERT INTO BANKACCOUNT(ID, USER_ID, BALANCE) VALUES (BANKACCOUNT_SEQ.NEXTVAL, 9, 10);

/*
(1) A registered user can login with their username and password  
username, password are given >> (1) first check if the username exist (2) if so, check if password is right
*/
-- create function to check if the username exist
CREATE OR REPLACE FUNCTION if_userExist (
    v_name IN bankuser.name%TYPE)
    RETURN NUMBER IS v_ifExist NUMBER;
BEGIN
    SELECT COUNT(*) into v_ifExist 
    FROM BANKUSER WHERE name = v_name;
    return v_ifExist;
END; 
/

SELECT if_userExist('BASICUSER1') as ifExist
FROM dual;

--create function to check if the password is right by the name
CREATE OR REPLACE FUNCTION if_rightPW (
    v_id IN bankuser.id%TYPE,
    v_pw IN bankuser.pw%TYPE)
    RETURN NUMBER IS v_ifRight NUMBER;
BEGIN
    SELECT 
        CASE WHEN pw = v_pw THEN 1   -- 1 : TRUE (RIGHT PW)
        ELSE 0               -- 0: FALSE (WRONG PW)
        END
    INTO v_ifRight FROM BANKUSER WHERE id = v_id; 
    RETURN v_ifRight;
END;
/
select if_rightPW(3, 'BASICUSER3') ifRightPW from dual;
 
 
 
SELECT bu.id as userId, bu.name as name, sum(ba.balance) as totalBalance
FROM bankuser bu, bankaccount ba
WHERE  bu.id = ba.user_id
GROUP BY bu.id, bu.name
ORDER BY bu.id;


SELECT bu.id as userId, bu.name as name, sum(NVL(ba.balance,0)) as totalBalance
FROM bankuser bu left join bankaccount ba
ON bu.id = ba.user_id
GROUP BY bu.id, bu.name
ORDER BY bu.id;

commit;


rollback;