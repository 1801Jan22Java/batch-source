
-- RUN THIS ONLY IF TABLES AND SEQUNECES ARE DEFINED
DROP TABLE BANK_USERXACCOUNT;
DROP TABLE BANK_USER;
DROP TABLE ACCOUNT;
DROP SEQUENCE SQ_ACCOUNT_PK;
DROP SEQUENCE SQ_BANK_USER_PK;


CREATE TABLE BANK_USER (
USER_ID INTEGER PRIMARY KEY,
FIRST_NAME VARCHAR2(30),
LAST_NAME VARCHAR2(30),
USER_PASSWORD VARCHAR2(20),
USERNAME VARCHAR(20) UNIQUE,
SUPERUSER NUMBER(1) DEFAULT 0
);



CREATE TABLE ACCOUNT (
ACCOUNT_ID INTEGER PRIMARY KEY,
AMOUNT INTEGER,
ACCOUNT_NAME VARCHAR2(50) DEFAULT 'ACCOUNT'
);

CREATE TABLE BANK_USERXACCOUNT (
USER_ID INTEGER,
ACCOUNT_ID INTEGER,
PRIMARY KEY (USER_ID, ACCOUNT_ID)
);



ALTER TABLE BANK_USER
ADD CONSTRAINT CK_FIRSTNAME_NOT_NULL CHECK (FIRST_NAME  IS NOT NULL);

ALTER TABLE BANK_USER
ADD CONSTRAINT CK_LASTNAME_NOT_NULL CHECK (LAST_NAME  IS NOT NULL);

ALTER TABLE BANK_USER
ADD CONSTRAINT CK_SUPERUSER_1_0 CHECK (SUPERUSER = 1 OR SUPERUSER = 0);

ALTER TABLE ACCOUNT
ADD CONSTRAINT CK_ACCOUNT_POSITIVE CHECK (AMOUNT > -1);

ALTER TABLE BANK_USERXACCOUNT
ADD CONSTRAINT FK_USER_ID
FOREIGN KEY (USER_ID) REFERENCES BANK_USER(USER_ID) ON DELETE CASCADE;

ALTER TABLE BANK_USERXACCOUNT
ADD CONSTRAINT FK_ACCOUNT_ID
FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNT(ACCOUNT_ID) ON DELETE CASCADE;

CREATE SEQUENCE SQ_BANK_USER_PK
START WITH 1001
INCREMENT BY 1;
/

CREATE SEQUENCE SQ_ACCOUNT_PK
START WITH 1001
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER TR_INSERT_USER
BEFORE INSERT ON BANK_USER
FOR EACH ROW
BEGIN
  SELECT SQ_BANK_USER_PK.NEXTVAL INTO :NEW.USER_ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER TR_INSERT_ACCOUNT
BEFORE INSERT ON ACCOUNT
FOR EACH ROW
BEGIN
  SELECT SQ_ACCOUNT_PK.NEXTVAL INTO :NEW.ACCOUNT_ID FROM DUAL;
END;
/

CREATE OR REPLACE PROCEDURE WITHDRAW_AMOUNT(
A_ID IN ACCOUNT.ACCOUNT_ID%TYPE,
AMOUNT_WITHDRAW IN ACCOUNT.AMOUNT%TYPE)
AS
CUR_AMOUNT ACCOUNT.AMOUNT%TYPE;
OVERDRAFT_EXCEPTION EXCEPTION;
BEGIN
    SELECT AMOUNT INTO CUR_AMOUNT FROM ACCOUNT WHERE ACCOUNT.ACCOUNT_ID = A_ID;
    IF (CUR_AMOUNT >= AMOUNT_WITHDRAW) THEN
        UPDATE ACCOUNT 
        SET AMOUNT = (CUR_AMOUNT - AMOUNT_WITHDRAW)
        WHERE ACCOUNT.ACCOUNT_ID = A_ID;
    ELSE
        RAISE OVERDRAFT_EXCEPTION;
    END IF;
END;
/

CREATE OR REPLACE PROCEDURE ADD_ACCOUNT (
A_NAME IN ACCOUNT.ACCOUNT_NAME%TYPE,
A_AMOUNT IN ACCOUNT.AMOUNT%TYPE,
U_ID IN BANK_USER.USER_ID%TYPE
)
AS
BEGIN
    INSERT INTO ACCOUNT (ACCOUNT_NAME, AMOUNT) VALUES (A_NAME, A_AMOUNT);
    INSERT INTO BANK_USERXACCOUNT (USER_ID, ACCOUNT_ID) VALUES (U_ID, SQ_ACCOUNT_PK.CURRVAL);
END;
/




INSERT INTO BANK_USER (USER_ID, FIRST_NAME, LAST_NAME, USER_PASSWORD, USERNAME, SUPERUSER) 
VALUES (1, 'ADMIN', 'ADMIN', 'ADMIN', 'ADMIN', 1);

INSERT INTO BANK_USER (FIRST_NAME, LAST_NAME, USER_PASSWORD, USERNAME, SUPERUSER) 
VALUES ('TEST', 'USER1', 'PASSWORD', 'TESTUSER1', 0);
INSERT INTO BANK_USER (FIRST_NAME, LAST_NAME, USER_PASSWORD, USERNAME, SUPERUSER) 
VALUES ('TEST', 'USER2', 'PASSWORD', 'TESTUSER2', 0);
INSERT INTO BANK_USER (FIRST_NAME, LAST_NAME, USER_PASSWORD, USERNAME, SUPERUSER) 
VALUES ('TEST', 'USER3', 'PASSWORD', 'TESTUSER3', 0);

INSERT INTO ACCOUNT (AMOUNT, ACCOUNT_NAME)
VALUES(400, 'CHECKING');

INSERT INTO ACCOUNT (AMOUNT, ACCOUNT_NAME)
VALUES(653, 'SAVINGS');

INSERT INTO ACCOUNT (AMOUNT)
VALUES(1000);

INSERT INTO BANK_USERXACCOUNT (USER_ID, ACCOUNT_ID)
VALUES (1002, 1001);

INSERT INTO BANK_USERXACCOUNT (USER_ID, ACCOUNT_ID)
VALUES (1003, 1002);

INSERT INTO BANK_USERXACCOUNT (USER_ID, ACCOUNT_ID)
VALUES (1004, 1003);


COMMIT;


BEGIN 
    WITHDRAW_AMOUNT(1001, 500);
END;
/