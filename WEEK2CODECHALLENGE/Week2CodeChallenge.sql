CREATE TABLE EMPLOYEE
(
    EMPLOYEE_ID NUMBER NOT NULL,
    EMP_FIRSTNAME VARCHAR2(60) NOT NULL,
    EMP_LASTNAME VARCHAR2(60) NOT NULL,
    DEPARTMENT_ID NUMBER NOT NULL,
    SALARY NUMBER NOT NULL,
    EMP_EMAIL VARCHAR2(60) NOT NULL,
    CONSTRAINT PK_EMP_ID PRIMARY KEY  (EMPLOYEE_ID)
);

CREATE TABLE DEPARTMENT_ID
(
	DEPARTMENT_ID NUMBER NOT NULL,
	DEPARTMENT_NAME VARCHAR2 (60) NOT NULL,
	CONSTRAINT PK_DEP_ID PRIMARY KEY (DEPARTMENT_ID)
);

CREATE SEQUENCE EMP_NUM_SEQ
START WITH 1001;

CREATE SEQUENCE DEP_NUM_SEQ
START WITH 11;

CREATE OR REPLACE TRIGGER "AUTOINCREMENT" BEFORE INSERT ON EMPLOYEE
FOR EACH ROW
 WHEN (new.EMPLOYEE_ID IS NULL) 
BEGIN
  SELECT EMP_NUM_SEQ.NEXTVAL 
  INTO :new.EMPLOYEE_ID 
  FROM dual;
END;
/

CREATE OR REPLACE TRIGGER "DEPINCREMENT" BEFORE INSERT ON DEPARTMENT
FOR EACH ROW
    WHEN (new.DEPARTMENT_ID IS NULL)
BEGIN
    SELECT DEP_NUM_SEQ.NEXTVAL
    INTO :new.DEPARTMENT_ID
    FROM dual;
END;
/


ALTER TABLE EMPLOYEE ADD CONSTRAINT FK_EMP_DEP_ID
    FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENT (DEPARTMENT_ID) ;
    
INSERT INTO DEPARTMENT (DEPARTMENT_ID, DEPARTMENT_NAME) 
VALUES (5, 'PROCESSING');

INSERT INTO DEPARTMENT (DEPARTMENT_ID, DEPARTMENT_NAME) 
VALUES (6, 'QA');

INSERT INTO DEPARTMENT (DEPARTMENT_ID, DEPARTMENT_NAME) 
VALUES (7, 'MARKETING');

INSERT INTO EMPLOYEE (EMPLOYEE_ID, EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL)
VALUES (975, 'Tom', 'Cruise', 5, 44444, 'tomcruise@gmail.com');

INSERT INTO EMPLOYEE (EMPLOYEE_ID, EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL)
VALUES (976, 'Mary', 'Jane', 7, 55555, 'maryjane@hotmail.com');

INSERT INTO EMPLOYEE (EMPLOYEE_ID, EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL)
VALUES (977, 'Tom', 'Richardson', 7, 43434, 'tomrich@hotmail.com');

INSERT INTO EMPLOYEE (EMPLOYEE_ID, EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL)
VALUES (978, 'Tina', 'Tiny', 6, 50000, 'tinytina@yahoo.com');

INSERT INTO EMPLOYEE (EMPLOYEE_ID, EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL)
VALUES (979, 'Lester', 'Pester', 7, 25000, 'lestthepest@hotmail.com');

INSERT INTO EMPLOYEE (EMPLOYEE_ID, EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL)
VALUES (980, 'Elizabeth', 'Park', 5, 34543, 'queenelizabethpark@gmail.com');


/*Create a stored procedure SP_GIVE_RAISE which takes in a DEPARTMENT_ID and increases each 
employee's salary within the department by 10%, and returns the new average salary for the 
department, as well as a boolean value indicating whether the ID entered corresponds to a valid
department. 
*/

CREATE OR REPLACE PROCEDURE SP_GIVE_RAISE(DEPARTMENT_ID NUMBER) IS
DEP_EMP EMPLOYEE.EMPLOYEE_ID%TYPE;
DEP_EMP_SAL EMPLOYEE.SALARY%TYPE;
ID_CHECK BOOLEAN;
BEGIN
UPDATE EMPLOYEE
SET SALARY = SALARY * 1.1
WHERE EMPLOYEE.DEPARTMENT_ID = DEPARTMENT_ID;
END SP_GIVE_RAISE;
/

