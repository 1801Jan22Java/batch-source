CREATE TABLE MEMBERS (
    MEMBERID NUMBER NOT NULL PRIMARY KEY,
    FIRSTNAME varchar(255) NOT NULL,
    LASTNAME varchar(255) NOT NULL,
    USERNAME varchar(255) NOT NULL,
    PWORD varchar(255) NOT NULL,
    CONSTRAINT PK_MEMBERID PRIMARY KEY (MEMBERS)

);

CREATE TABLE MEMBERS_ACCOUNT (
    MEMBERID NUMBER NOT NULL,
    ACCOUNTID NUMBER NOT NULL PRIMARY KEY,
    BALANCE NUMBER,
    CONSTRAINT PK_ACCOUNTID PRIMARY KEY (ACCOUNTID)
    
);
-- CONSTRAINT
ALTER TABLE MEMBERS
ADD CONSTRAINT FK_MEMBER_ACCOUNT
FOREIGN KEY (AID) REFERENCES MEMBERS_ACCOUNT(ACCOUNTID);

CREATE OR REPLACE PROCEDURE CREATE_ACCOUNT
( MEM_ID MEMBER_ACC.MEMBERID%TYPE, COMPANY_NAME OUT CUSTOMER.COMPANY%TYPE,FIRST_NAME OUT CUSTOMER.FIRSTNAME%TYPE, LAST_NAME OUT CUSTOMER.LASTNAME%TYPE)
AS
BEGIN
INSERT INTO MEMBER_ACC(MEMBERID, FIRSTNAME, LASTNAME, USERNAME, PWORD, BALANCE)  VALUES  (MEM_ID, FNAME, LNAME, UNAME, PASS_WORD, BAL);
END;
/



CREATE OR REPLACE PROCEDURE WITHDRAW_DEPOSIT
(TRANS_AMOUNT NUMBER)
AS BEGIN
UPDATE MEMBER_ACC SET BALANCE = BALANCE + TRANS_AMOUNT WHERE MEMBERID = MEM_ID ;
END;

-- SEQUENCES

CREATE SEQUENCE MEMBER_SEQUENCE
START WITH 1  
INCREMENT BY 50 ;  

CREATE SEQUENCE ACCOUNTID_SEQUENCE
START WITH 1  
INCREMENT BY 10 ;  

-- TRIGGERS

CREATE OR REPLACE TRIGGER MEMBER_TRIGGER
BEFORE INSERT ON MEMBERS
FOR EACH ROW
BEGIN
  SELECT MEMBER_SEQUENCE.NEXTVAL 
  INTO :NEW.MEMBERID FROM DUAL;
END;

CREATE OR REPLACE TRIGGER ACCOUNT_TRIGGER
BEFORE INSERT ON MEMBERS_ACCOUNT
FOR EACH ROW
BEGIN
  SELECT ACCOUNTID_SEQUENCE.NEXTVAL 
  INTO :NEW.ACCOUNTID FROM DUAL;
END;

