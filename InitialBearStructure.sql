--CREATE TABLE STRUCTURE FOR BEARS_DB

DROP TABLE BEAR;
DROP TABLE BEAR_TYPE;
DROP TABLE CAVE;
DROP TABLE BEEHIVE;
DROP TABLE BEAR_BEEHIVE;
/
CREATE TABLE BEAR (
  BEAR_ID INTEGER PRIMARY KEY,
  BEAR_TYPE_ID INTEGER,
  BEAR_NAME VARCHAR2(100),
  BEAR_BIRTHDATE DATE,
  BEAR_WEIGHT INTEGER DEFAULT 200,
  CAVE_ID INTEGER 
);
/
CREATE TABLE BEAR_TYPE (
  BEAR_TYPE_ID INTEGER PRIMARY KEY,
  BEAR_TYPE_NAME VARCHAR2(100)
);
/
CREATE TABLE CAVE (
  CAVE_ID INTEGER PRIMARY KEY,
  CAVE_NAME VARCHAR2(100),
  MAX_BEARS INTEGER DEFAULT 4
);
/
CREATE TABLE BEEHIVE (
  BEEHIVE_ID INTEGER PRIMARY KEY,
  BEEHIVE_WEIGHT INTEGER DEFAULT 50
);
/
CREATE TABLE BEAR_BEEHIVE (
  BEAR_ID INTEGER,
  BEEHIVE_ID INTEGER,
  PRIMARY KEY (BEAR_ID, BEEHIVE_ID)
);
/
--FOREIGN KEY CONSTRAINTS

ALTER TABLE BEAR
ADD CONSTRAINT FK_BEAR_BEAR_TYPE
FOREIGN KEY (BEAR_TYPE_ID) REFERENCES BEAR_TYPE(BEAR_TYPE_ID)
ON DELETE SET NULL;

ALTER TABLE BEAR
ADD CONSTRAINT FK_BEAR_CAVE
FOREIGN KEY (CAVE_ID) REFERENCES CAVE(CAVE_ID)
ON DELETE SET NULL;

ALTER TABLE BEAR_BEEHIVE
ADD CONSTRAINT FK_BEAR_BEEHIVE_BEAR
FOREIGN KEY (BEAR_ID) REFERENCES BEAR(BEAR_ID)
ON DELETE CASCADE;

ALTER TABLE BEAR_BEEHIVE
ADD CONSTRAINT FK_BEAR_BEEHIVE_BEEHIVE 
FOREIGN KEY (BEEHIVE_ID) REFERENCES BEEHIVE(BEEHIVE_ID)
ON DELETE CASCADE;

--ADD CHECK CONSTRAINT TO KEEP BEAR AND BEEHIVE WEIGHTS >0

ALTER TABLE BEAR
ADD CONSTRAINT CK_BEAR_WEIGHT_POSITIVE CHECK (BEAR_WEIGHT > 0);

ALTER TABLE BEEHIVE
ADD CONSTRAINT CK_BEEHIVE_WEIGHT_POSITIVE CHECK (BEEHIVE_WEIGHT > 0);

--ADD UNIQUE CONSTRAINT ON CAVE NAME, BEAR TYPE NAME 

ALTER TABLE CAVE
ADD CONSTRAINT UQ_CAVE_NAME UNIQUE (CAVE_NAME);

ALTER TABLE BEAR_TYPE
ADD CONSTRAINT UQ_TYPE_NAME UNIQUE (BEAR_TYPE_NAME);
/
--SEQUENCES 

CREATE SEQUENCE SQ_BEAR_PK
START WITH 5
INCREMENT BY 2;
/
CREATE SEQUENCE SQ_BEAR_TYPE_PK
START WITH 5
INCREMENT BY 3;
/
CREATE SEQUENCE SQ_CAVE_PK
START WITH 5
INCREMENT BY 2;
/
CREATE SEQUENCE SQ_BEEHIVE_PK
START WITH 5
INCREMENT BY 2;
/
--CREATE BEFORE INSERT TRIGGERS 

CREATE OR REPLACE TRIGGER TR_INSERT_BEAR
BEFORE INSERT ON BEAR
FOR EACH ROW
BEGIN
  SELECT SQ_BEAR_PK.NEXTVAL INTO :NEW.BEAR_ID FROM DUAL;
END;
/
CREATE OR REPLACE TRIGGER TR_INSERT_BEAR_TYPE
BEFORE INSERT ON BEAR_TYPE
FOR EACH ROW
BEGIN
  SELECT SQ_BEAR_TYPE_PK.NEXTVAL INTO :NEW.BEAR_TYPE_ID FROM DUAL;
END;
/
CREATE OR REPLACE TRIGGER TR_INSERT_CAVE
BEFORE INSERT ON CAVE
FOR EACH ROW
BEGIN
  SELECT SQ_CAVE_PK.NEXTVAL INTO :NEW.CAVE_ID FROM DUAL;
END;
/
CREATE OR REPLACE TRIGGER TR_INSERT_BEEHIVE
BEFORE INSERT ON BEEHIVE
FOR EACH ROW
BEGIN
  SELECT SQ_BEEHIVE_PK.NEXTVAL INTO :NEW.BEEHIVE_ID FROM DUAL;
END;
/

SELECT * FROM DUAL;

--USE TRIGGERS TO GENERATE PRIMARY KEYS

INSERT INTO CAVE (CAVE_NAME, MAX_BEARS) VALUES ('AWESOMECAVE1', DEFAULT);
INSERT INTO CAVE (CAVE_NAME, MAX_BEARS) VALUES ('RESTON', 10);

INSERT INTO BEEHIVE(BEEHIVE_WEIGHT) VALUES (DEFAULT);
INSERT INTO BEEHIVE(BEEHIVE_WEIGHT) VALUES (75);
INSERT INTO BEEHIVE(BEEHIVE_WEIGHT) VALUES (10);

INSERT INTO BEAR_TYPE(BEAR_TYPE_NAME) VALUES ('GRIZZLY');
INSERT INTO BEAR_TYPE(BEAR_TYPE_NAME) VALUES ('POLAR');
INSERT INTO BEAR_TYPE(BEAR_TYPE_NAME) VALUES ('SUN');

INSERT INTO BEAR
(BEAR_TYPE_ID, BEAR_NAME, BEAR_BIRTHDATE, BEAR_WEIGHT, CAVE_ID)
VALUES(5,'CYNTHIA','5-NOV-1912',DEFAULT,5);

INSERT INTO BEAR
(BEAR_TYPE_ID, BEAR_NAME, BEAR_BIRTHDATE, BEAR_WEIGHT, CAVE_ID)
VALUES(5,'HENRY','5-NOV-2012',500,5);

INSERT INTO BEAR
(BEAR_TYPE_ID, BEAR_NAME, BEAR_BIRTHDATE, BEAR_WEIGHT, CAVE_ID)
VALUES(8,'DOLORES','12-APR-2007',150,7);

INSERT INTO BEAR_BEEHIVE
(BEAR_ID, BEEHIVE_ID) VALUES (5,5);

INSERT INTO BEAR_BEEHIVE
(BEAR_ID, BEEHIVE_ID) VALUES (5,7);

INSERT INTO BEAR_BEEHIVE
(BEAR_ID, BEEHIVE_ID) VALUES (9,5);

--FEED THE BEAR! 
CREATE OR REPLACE PROCEDURE SP_FEED_BEAR(B_ID IN NUMBER, H_ID IN NUMBER, 
HONEY_AMT IN NUMBER)
IS 
BB_EXISTS INTEGER;
BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
--CHECK THAT THIS BEAR IS MATCHED WITH THIS BEEHIVE 
SELECT COUNT(BB.BEAR_ID) INTO BB_EXISTS FROM BEAR_BEEHIVE BB
WHERE BB.BEAR_ID = B_ID
AND BB.BEEHIVE_ID = H_ID;
DBMS_OUTPUT.PUT_LINE(BB_EXISTS);
IF BB_EXISTS > 0 THEN
  --DECREASE BEEHIVE WEIGHT
  UPDATE BEEHIVE 
  SET BEEHIVE_WEIGHT = BEEHIVE_WEIGHT-HONEY_AMT
  WHERE BEEHIVE_ID = H_ID;
  --INCREASE BEAR WEIGHT
  UPDATE BEAR 
  SET BEAR_WEIGHT = BEAR_WEIGHT + HONEY_AMT 
  WHERE BEAR_ID = B_ID;
  DBMS_OUTPUT.PUT_LINE('FED BEAR '||HONEY_AMT||' POUNDS OF HONEY');
ELSE 
  DBMS_OUTPUT.PUT_LINE('FAILED TO FEED BEAR');
END IF;
COMMIT;
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('FAILED TO FEED BEAR');
--https://docs.oracle.com/cd/B10501_01/appdev.920/a96624/07_errs.htm 
ROLLBACK;
END;
