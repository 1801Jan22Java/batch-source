DROP TABLE REIMBURSEMENT;
DROP TABLE EMPLOYEE;
DROP TABLE EMPLOYEEINFO;
DROP TABLE MANAGER;
DROP TABLE STATUS;
DROP SEQUENCE EMP_SEQ;
DROP SEQUENCE EMP_INFO_SEQ;
DROP SEQUENCE MAN_SEQ;
DROP SEQUENCE REIM_SEQ;

/****************************************************
    Create Tables
****************************************************/

CREATE TABLE Employee 
(
    EMPLOYEE_ID INTEGER NOT NULL,
    USERNAME VARCHAR2(30) NOT NULL UNIQUE,
    PASSWORD VARCHAR2(30) NOT NULL,
    EMPLOYEE_INFO_ID INTEGER NOT NULL
);

CREATE TABLE EmployeeInfo
(
    EMPLOYEE_INFO_ID INTEGER NOT NULL,
    EMAIL VARCHAR2(40) NOT NULL,
    FIRSTNAME VARCHAR2(40) NOT NULL,
    LASTNAME VARCHAR2(40) NOT NULL,
    ADDRESS VARCHAR2(40)
);

CREATE TABLE Manager
(
    MANAGER_ID INTEGER NOT NULL,
    USERNAME VARCHAR2(30) NOT NULL UNIQUE,
    PASSWORD VARCHAR2(30) NOT NULL
);

CREATE TABLE Reimbursement
(
    REIMBURSEMENT_ID INTEGER NOT NULL,
    EMPLOYEE_ID INTEGER NOT NULL,
    MANAGER_ID INTEGER,
    STATUS_ID INTEGER,
    REIMBURSEMENT_VALUE DECIMAL(20,2),
    IMAGE BLOB
);

CREATE TABLE Status
(
    STATUS_ID INTEGER NOT NULL,
    STATUS_CODE VARCHAR2(40) NOT NULL
);

/****************************************************
    Create Primary Keys
****************************************************/

ALTER TABLE Employee ADD CONSTRAINT PK_EMP_ID
PRIMARY KEY (EMPLOYEE_ID);

ALTER TABLE EmployeeInfo ADD CONSTRAINT PK_EMP_INFO_ID
PRIMARY KEY (EMPLOYEE_INFO_ID);

ALTER TABLE Manager ADD CONSTRAINT PK_MAN_ID
PRIMARY KEY (MANAGER_ID);

ALTER TABLE Reimbursement ADD CONSTRAINT PK_REIM_ID
PRIMARY KEY (REIMBURSEMENT_ID);

ALTER TABLE Status ADD CONSTRAINT PK_STATUS_ID
PRIMARY KEY (STATUS_ID);

/****************************************************
    Create Foreign Keys
****************************************************/

ALTER TABLE Employee ADD CONSTRAINT FK_EMP_INF_ID
FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEE (EMPLOYEE_ID);

ALTER TABLE Reimbursement ADD CONSTRAINT FK_MAN_ID
FOREIGN KEY (MANAGER_ID) REFERENCES MANAGER (MANAGER_ID);

ALTER TABLE Reimbursement ADD CONSTRAINT FK_EMP_ID
FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEE (EMPLOYEE_ID);

ALTER TABLE Reimbursement ADD CONSTRAINT FK_STS_ID
FOREIGN KEY (STATUS_ID) REFERENCES STATUS (STATUS_ID);

/****************************************************
    Create Triggers & Sequences
****************************************************/

CREATE SEQUENCE EMP_SEQ
START WITH 1000
INCREMENT BY 1;

CREATE SEQUENCE EMP_INFO_SEQ
START WITH 1000
INCREMENT BY 1;

CREATE SEQUENCE MAN_SEQ
START WITH 1000
INCREMENT BY 1;

CREATE SEQUENCE REIM_SEQ
START WITH 1000
INCREMENT BY 1;

CREATE OR REPLACE TRIGGER NEW_EMPLOYEE
BEFORE INSERT ON Employee
FOR EACH ROW
BEGIN
SELECT EMP_SEQ.NEXTVAL
INTO :new.EMPLOYEE_ID
FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER NEW_EMPLOYEE_INFO
BEFORE INSERT ON EmployeeInfo
FOR EACH ROW
BEGIN
SELECT EMP_INFO_SEQ.NEXTVAL
INTO :new.EMPLOYEE_INFO_ID
FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER NEW_MANAGER
BEFORE INSERT ON Manager
FOR EACH ROW
BEGIN
SELECT MAN_SEQ.NEXTVAL
INTO :new.MANAGER_ID
FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER NEW_REIMBURSEMENT
BEFORE INSERT ON Reimbursement
FOR EACH ROW
BEGIN
SELECT REIM_SEQ.NEXTVAL
INTO :new.REIMBURSEMENT_ID
FROM DUAL;
END;
/

/****************************************************
    Create Stored Procedure
****************************************************/

CREATE OR REPLACE PROCEDURE ADD_MANAGER
(
    USERNAME IN MANAGER.USERNAME%TYPE,
    PASSWORD IN MANAGER.PASSWORD%TYPE,
    MAN_ID OUT MANAGER.MANAGER_ID%TYPE
)
AS
BEGIN
    INSERT INTO MANAGER VALUES(0,USERNAME,PASSWORD);
    SELECT MAX(MANAGER_ID) INTO MAN_ID FROM MANAGER;
END;
/

CREATE OR REPLACE PROCEDURE ADD_EMPLOYEE_INFO
(
    EMAIL IN EMPLOYEEINFO.EMAIL%TYPE,
    FIRSTNAME IN EMPLOYEEINFO.FIRSTNAME%TYPE,
    LASTNAME IN EMPLOYEEINFO.LASTNAME%TYPE,
    ADDRESS IN EMPLOYEEINFO.ADDRESS%TYPE,
    EMP_INFO_ID OUT MANAGER.MANAGER_ID%TYPE
)
AS
BEGIN
    INSERT INTO EMPLOYEEINFO VALUES(0,EMAIL,FIRSTNAME,LASTNAME,ADDRESS);
    SELECT MAX(EMPLOYEE_INFO_ID) INTO EMP_INFO_ID FROM EMPLOYEEINFO;
END;
/

CREATE OR REPLACE PROCEDURE ADD_EMPLOYEE
(
    USERNAME IN EMPLOYEE.USERNAME%TYPE,
    PASSWORD IN EMPLOYEE.PASSWORD%TYPE,
    EMAIL IN EMPLOYEEINFO.EMAIL%TYPE,
    FIRSTNAME IN EMPLOYEEINFO.FIRSTNAME%TYPE,
    LASTNAME IN EMPLOYEEINFO.LASTNAME%TYPE,
    ADDRESS IN EMPLOYEEINFO.ADDRESS%TYPE,
    EMP_ID OUT MANAGER.MANAGER_ID%TYPE
)
IS
EMP_INFO_ID EMPLOYEEINFO.EMPLOYEE_INFO_ID%TYPE;
BEGIN
    ADD_EMPLOYEE_INFO(EMAIL,FIRSTNAME,LASTNAME,ADDRESS,EMP_INFO_ID);
    INSERT INTO EMPLOYEE VALUES(0,USERNAME,PASSWORD,EMP_INFO_ID);
    SELECT MAX(EMPLOYEE_ID) INTO EMP_ID FROM EMPLOYEE;
END;
/


CREATE OR REPLACE PROCEDURE ADD_REIMBURSEMENT
(
    EMP_ID IN EMPLOYEE.EMPLOYEE_ID%TYPE,
    VAL IN REIMBURSEMENT.REIMBURSEMENT_VALUE%TYPE,
    IMG IN REIMBURSEMENT.IMAGE%TYPE,
    REI_ID OUT REIMBURSEMENT.REIMBURSEMENT_ID%TYPE
)
AS
BEGIN
    INSERT INTO REIMBURSEMENT VALUES(0,EMP_ID,NULL,1,VAL,IMG);
    SELECT MAX(REIMBURSEMENT_ID) INTO REI_ID FROM REIMBURSEMENT;
END;
/
/****************************************************
    Insert status codes
****************************************************/

INSERT INTO STATUS VALUES(0,'PENDING');
INSERT INTO STATUS VALUES(1,'APPROVED');
INSERT INTO STATUS VALUES(2,'CANCELED');
insert into employeeinfo values(0,'email','first','second',null);
insert into employee values(0,'f','p',1000);
select * from employee where (username = 'f') and (password = 'p');
