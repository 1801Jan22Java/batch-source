CREATE TABLE BEAR (
BEAR_ID INTEGER PRIMARY KEY,
BEAR_TYPE_ID INTEGER,
BEAR_NAME VARCHAR2(100),
BEAR_BIRTHDATE DATE,
BEAR_WEIGHT INTEGER DEFAULT 200,
CAVE_ID INTEGER
);
CREATE TABLE BEAR_TYPE (
BEAR_TYPE_ID INTEGER PRIMARY KEY,
BEAR_TYPE_NAME VARCHAR2(100)
);
CREATE TABLE CAVE (
CAVE_ID INTEGER PRIMARY KEY,
CAVE_NAME VARCHAR2(100),
MAX_BEARS INTEGER DEFAULT 4
);
CREATE TABLE BEEHIVE (
BEEHIVE_ID INTEGER PRIMARY KEY,
BEEHIVE_WEIGHT INTEGER DEFAULT 50
);
CREATE TABLE BEAR_BEEHIVE (
BEAR_ID INTEGER,
BEEHIVE_ID INTEGER,
PRIMARY KEY (BEAR_ID, BEEHIVE_ID)
);
-- FOREIGN KEY CONSTRAINTS
ALTER TABLE BEAR
ADD CONSTRAINT FK_BEAR_BEAR_TYPE
FOREIGN KEY (BEAR_TYPE_ID) REFERENCES BEAR_TYPE(BEAR_TYPE_ID);
ALTER TABLE BEAR
ADD CONSTRAINT FK_BEAR_CAVE
FOREIGN KEY (CAVE_ID) REFERENCES CAVE(CAVE_ID);
ALTER TABLE BEAR_BEEHIVE
ADD CONSTRAINT FK_BEAR_BEEHIVE_BEAR
FOREIGN KEY (BEAR_ID) REFERENCES BEAR(BEAR_ID);
ALTER TABLE BEAR_BEEHIVE
ADD CONSTRAINT FK_BEAR_BEEHIVE_BEEHIVE
FOREIGN KEY (BEEHIVE_ID) REFERENCES BEEHIVE(BEEHIVE_ID);

INSERT INTO BEAR_TYPE VALUES (1, 'GRIZZLY');
INSERT INTO BEAR_TYPE VALUES (2, 'POLAR');
INSERT INTO BEAR_TYPE VALUES (3, 'PANDA');

INSERT INTO BEAR VALUES (1,2,'CEDRIC','5-NOV-1962',DEFAULT,NULL);

SELECT * FROM BEAR;

CREATE SEQUENCE ID_BEAR
START WITH 2;
CREATE SEQUENCE ID_BEEHIVE;
CREATE SEQUENCE ID_BEAR_TYPE
START WITH 4;
CREATE SEQUENCE ID_CAVE;

CREATE OR REPLACE PROCEDURE ADD_BEAR_THINGS(
BNAME IN BEAR.BEAR_NAME%TYPE,
BDAY IN BEAR.BEAR_BIRTHDATE%TYPE,
BWEIGHT IN BEAR.BEAR_WEIGHT%TYPE,
CNAME IN CAVE.CAVE_NAME%TYPE,
BTYPE IN BEAR_TYPE.BEAR_TYPE_NAME%TYPE)
AS
BEGIN
    INSERT INTO BEAR_TYPE (BEAR_TYPE_ID, BEAR_TYPE_NAME) VALUES (ID_BEAR_TYPE.NEXTVAL, BTYPE);
    INSERT INTO CAVE (CAVE_ID, CAVE_NAME) VALUES (ID_CAVE.NEXTVAL, CNAME);
    INSERT INTO BEAR (BEAR_ID, BEAR_TYPE_ID, BEAR_NAME, BEAR_BIRTHDATE, BEAR_WEIGHT, CAVE_ID) 
    VALUES (ID_BEAR.NEXTVAL, ID_BEAR_TYPE.CURRVAL, BNAME, BDAY, BWEIGHT, ID_CAVE.CURRVAL);
    INSERT INTO BEEHIVE (BEEHIVE_ID) VALUES (ID_BEEHIVE.NEXTVAL);
    INSERT INTO BEAR_BEEHIVE (BEAR_ID, BEEHIVE_ID) VALUES (ID_BEAR.CURRVAL, ID_BEEHIVE.CURRVAL);
    COMMIT;
END ADD_BEAR_THINGS;
/

BEGIN
    ADD_BEAR_THINGS('GREG', '15-NOV-98', 300, 'CAVE1', 'COOL');
END;
/

SELECT * FROM BEEHIVE;


DROP TABLE BEAR;
DROP TABLE BEAR_TYPE;
DROP TABLE CAVE;
DROP TABLE BEEHIVE;
DROP TABLE BEAR_BEEHIVE;


--Create Functions using Chinook DB!
--
--1.Find the average number of songs per album for a given artist(artist Id is ok)
--ex. CREATE FUNCTION AVGSONG....
--
--TO CALL FUNCTION:
--BEGIN
--AVGSONG(PARAMETER1);
--END;
--
--2.Find the longest track of an album for a given album id.
CREATE OR REPLACE FUNCTION AVGSONG (ARTIST_ID NUMBER) 
RETURN NUMBER AS AVG_SONG NUMBER;
BEGIN
    SELECT AVERAGE INTO AVG_SONG FROM (SELECT AVG(NUM_SONGS) AS AVERAGE FROM (SELECT COUNT(*) AS NUM_SONGS FROM TRACK TR WHERE TR.ALBUMID IN 
    (SELECT ALB.ALBUMID FROM ALBUM ALB WHERE ALB.ARTISTID = ARTIST_ID) GROUP BY TR.ALBUMID));
    RETURN AVG_SONG;
END AVGSONG;
/
SET SERVEROUTPUT ON;
DECLARE
MY_NUM NUMBER;
BEGIN
SELECT AVGSONG(1) INTO MY_NUM  FROM DUAL;
DBMS_OUTPUT.PUT_LINE(MY_NUM);
END;
/

CREATE OR REPLACE FUNCTION LONGEST_TRACK (ALBUM_ID NUMBER)
RETURN NUMBER AS TRACK_ID NUMBER;
BEGIN
     SELECT TRACKID INTO TRACK_ID FROM 
     (SELECT TRACKID, MILLISECONDS AS MILLI1 FROM TRACK WHERE ALBUM_ID = ALBUMID) 
     JOIN 
     (SELECT MAX(MILLISECONDS) AS MILLI2 FROM TRACK WHERE TRACK.ALBUMID = ALBUM_ID)
     ON MILLI1 = MILLI2;
     
     RETURN TRACK_ID;
END;
/

BEGIN
DBMS_OUTPUT.PUT_LINE(LONGEST_TRACK(9));
END;
/
SELECT * FROM TRACK WHERE ALBUMID = 9 ORDER BY MILLISECONDS DESC;


-- Cursors
SET SERVEROUTPUT ON;

DECLARE
S SYS_REFCURSOR;
ALBUM_ID ALBUM.ALBUMID%TYPE;
ALBUMNAME ALBUM.TITLE%TYPE;
BEGIN
    GET_ALL_ALBUMS(S);
    LOOP
        FETCH S INTO ALBUM_ID, ALBUMNAME;
        EXIT WHEN S%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(ALBUM_ID || ' IS CURRENT ID, ' || ALBUMNAME || ' IS CURRENT NAME');
    END LOOP;
    CLOSE S;
END;
/

CREATE OR REPLACE PROCEDURE GET_ALL_ALBUMS(
S OUT SYS_REFCURSOR) 
AS
BEGIN
    OPEN S FOR SELECT ALBUMID, TITLE FROM ALBUM;
END;
/

CREATE OR REPLACE PROCEDURE GET_ALBUM_PRICE(
S OUT SYS_REFCURSOR)
AS 
BEGIN
    OPEN S FOR SELECT ALB.TITLE, SUM(UNITPRICE) FROM ALBUM ALB, TRACK TR WHERE ALB.ALBUMID = TR.ALBUMID GROUP BY ALB.ALBUMID;
END;
/

DECLARE
S SYS_REFCURSOR;
PRICE NUMBER;
ALBUMNAME ALBUM.TITLE%TYPE;
BEGIN
    GET_ALBUM_PRICE(S);
    LOOP
        FETCH S INTO ALBUMNAME, PRICE;
        EXIT WHEN S%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(ALBUMNAME || ' IS $' || PRICE);
    END LOOP;
    CLOSE S;
END;
/
