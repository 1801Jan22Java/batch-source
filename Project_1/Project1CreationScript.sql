
--DROP TABLE PROCESSED_REQUESTS;
--drop table REIMBURSEMENT_REQUEST;
--DROP TABLE EMPLOYEE;
--DROP TABLE EMPLOYEE_TITLE;
--DROP TABLE REQUEST_STATUS;



CREATE TABLE EMPLOYEE_TITLE (
    TYPE_NAME VARCHAR(20) PRIMARY KEY
);

CREATE TABLE REQUEST_STATUS (
    STATUS_NAME VARCHAR(10) PRIMARY KEY
);

CREATE TABLE EMPLOYEE (
    EMPL_ID INTEGER PRIMARY KEY,
    FIRSTNAME VARCHAR(30) NOT NULL,
    LASTNAME  VARCHAR(30) NOT NULL,
    USERNAME VARCHAR(20) UNIQUE NOT NULL,
    PASSWORD VARCHAR(20) NOT NULL,
    EMAIL VARCHAR(50) UNIQUE NOT NULL,
    EMPL_TYPE VARCHAR(20)
);

CREATE TABLE REIMBURSEMENT_REQUEST (
    REQ_ID INTEGER PRIMARY KEY,
    AMOUNT NUMBER,
    REQ_DATE DATE NOT NULL,
    EMPL_ID INTEGER,
    RECEIPT BLOB,
    DESCRIPTION VARCHAR2(200)
);

CREATE TABLE PROCESSED_REQUESTS (
    PR_ID INTEGER PRIMARY KEY,
    REQ_ID INTEGER,
    MANAGER_ID INTEGER,
    PROCESSED_ON DATE,
    STATUS VARCHAR(10)
);

ALTER TABLE REIMBURSEMENT_REQUEST
ADD CONSTRAINT CK_AMOUNT_POSITIVE CHECK (AMOUNT > 0);


ALTER TABLE EMPLOYEE 
ADD CONSTRAINT FK_EMPL_TYPE 
FOREIGN KEY (EMPL_TYPE) REFERENCES EMPLOYEE_TITLE(TYPE_NAME);

ALTER TABLE REIMBURSEMENT_REQUEST 
ADD CONSTRAINT FK_EMPL_ID 
FOREIGN KEY (EMPL_ID) REFERENCES EMPLOYEE(EMPL_ID);

ALTER TABLE PROCESSED_REQUESTS 
ADD CONSTRAINT FK_REQ_ID 
FOREIGN KEY (REQ_ID) REFERENCES REIMBURSEMENT_REQUEST(REQ_ID);

ALTER TABLE PROCESSED_REQUESTS 
ADD CONSTRAINT FK_MANAGER_ID 
FOREIGN KEY (MANAGER_ID) REFERENCES EMPLOYEE(EMPL_ID);


CREATE SEQUENCE SQ_REIMBURSEMENT_REQUEST_PK
START WITH 1001
INCREMENT BY 1;
/

CREATE SEQUENCE SQ_EMPLOYEE_PK
START WITH 1001
INCREMENT BY 1;
/

CREATE SEQUENCE SQ_PROCESSED_REQUESTS_PK
START WITH 1001
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER TR_INSERT_EMPLOYEE
BEFORE INSERT ON EMPLOYEE
FOR EACH ROW
BEGIN
  SELECT SQ_EMPLOYEE_PK.NEXTVAL INTO :NEW.EMPL_ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER TR_INSERT_REIM_REQUEST
BEFORE INSERT ON REIMBURSEMENT_REQUEST
FOR EACH ROW
BEGIN
  SELECT SQ_REIMBURSEMENT_REQUEST_PK.NEXTVAL INTO :NEW.REQ_ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER TR_INSERT_PROCESSED_REQUESTS
BEFORE INSERT ON PROCESSED_REQUESTS
FOR EACH ROW
BEGIN
  SELECT SQ_PROCESSED_REQUESTS_PK.NEXTVAL INTO :NEW.PR_ID FROM DUAL;
END;
/

COMMIT;