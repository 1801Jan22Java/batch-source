CREATE TABLE EMPLOYEE (
EMPLOYEE_ID NUMBER PRIMARY KEY, 
EMP_FIRSTNAME VARCHAR2(30), 
EMP_LASTNAME VARCHAR2(30), 
DEPARTMENT_ID NUMBER, 
SALARY NUMBER, 
EMP_EMAIL VARCHAR(50)
);

CREATE TABLE DEPARTMENT (
DEPARTMENT_ID NUMBER PRIMARY KEY, 
DEPARTMENT_NAME VARCHAR(30)
);

ALTER TABLE EMPLOYEE
ADD CONSTRAINT FK_BEPARTMENT_ID
FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENT(DEPARTMENT_ID) ON DELETE CASCADE;

CREATE SEQUENCE SQ_EMPLOYEE_PK
START WITH 1
INCREMENT BY 1;
/

CREATE SEQUENCE SQ_DEPARTMENT_PK
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER TR_INSERT_EMPLOYEE
BEFORE INSERT ON EMPLOYEE
FOR EACH ROW
BEGIN
  SELECT SQ_EMPLOYEE_PK.NEXTVAL INTO :NEW.EMPLOYEE_ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER TR_INSERT_DEPARTMENT
BEFORE INSERT ON DEPARTMENT
FOR EACH ROW
BEGIN
  SELECT SQ_DEPARTMENT_PK.NEXTVAL INTO :NEW.DEPARTMENT_ID FROM DUAL;
END;
/

INSERT INTO DEPARTMENT (DEPARTMENT_NAME) VALUES ('POLICE');

INSERT INTO EMPLOYEE (EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL)
VALUES ('Fred', 'Flintstone', SQ_DEPARTMENT_PK.CURRVAL, 1000, 'bedrock@bedrock.com');

INSERT INTO EMPLOYEE (EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL)
VALUES ('Barney', 'Rubble', SQ_DEPARTMENT_PK.CURRVAL, 5746, 'rubble@rubble.com');

INSERT INTO DEPARTMENT (DEPARTMENT_NAME) VALUES ('FIRE');

INSERT INTO EMPLOYEE (EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL)
VALUES ('John', 'Smith', SQ_DEPARTMENT_PK.CURRVAL, 9036, 'smith@smith.com');

INSERT INTO EMPLOYEE (EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL)
VALUES ('Some', 'Guy', SQ_DEPARTMENT_PK.CURRVAL, 156498, 'guy@guy.com');

INSERT INTO DEPARTMENT (DEPARTMENT_NAME) VALUES ('TAX');

INSERT INTO EMPLOYEE (EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL)
VALUES ('Another', 'Guy', SQ_DEPARTMENT_PK.CURRVAL, 2347, 'email@email.com');

INSERT INTO EMPLOYEE (EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL)
VALUES ('Land', 'Shark', SQ_DEPARTMENT_PK.CURRVAL, 1000, 'shark@sharknado.com');

CREATE OR REPLACE PROCEDURE SP_GIVE_RAISE (
DEP_ID IN DEPARTMENT.DEPARTMENT_ID%TYPE,
AVG_SAL OUT INTEGER,
IS_DEP OUT INTEGER)
AS
CT NUMBER;
BEGIN
    UPDATE EMPLOYEE SET SALARY = (1.1 * SALARY) WHERE DEPARTMENT_ID = DEP_ID;
    SELECT COUNT(*) INTO CT FROM DEPARTMENT WHERE DEPARTMENT_ID = DEP_ID;
    IF (CT > 0) THEN
        IS_DEP := 1;
    ELSE
        IS_DEP := 0;
    END IF;
    SELECT AVG(SALARY) INTO AVG_SAL FROM EMPLOYEE WHERE DEPARTMENT_ID = DEP_ID;
END SP_GIVE_RAISE;
/

CREATE OR REPLACE PROCEDURE SP_GIVE_RAISE_PERCENT_PROVIDED (
DEP_ID IN DEPARTMENT.DEPARTMENT_ID%TYPE,
PERCENT_INCR IN INTEGER,
AVG_SAL OUT INTEGER,
IS_DEP OUT INTEGER)
AS
CT NUMBER;
BEGIN
    UPDATE EMPLOYEE SET SALARY = ((1 + (PERCENT_INCR / 100)) * SALARY) WHERE DEPARTMENT_ID = DEP_ID;
    SELECT COUNT(*) INTO CT FROM DEPARTMENT WHERE DEPARTMENT_ID = DEP_ID;
    IF (CT > 0) THEN
        IS_DEP := 1;
    ELSE
        IS_DEP := 0;
    END IF;
    SELECT AVG(SALARY) INTO AVG_SAL FROM EMPLOYEE WHERE DEPARTMENT_ID = DEP_ID;
END SP_GIVE_RAISE;
/

COMMIT;

SELECT DEPARTMENT_NAME, AVG(SALARY) AS AVERAGE_SALARY
FROM EMPLOYEE INNER JOIN DEPARTMENT 
ON EMPLOYEE.DEPARTMENT_ID = DEPARTMENT.DEPARTMENT_ID
GROUP BY DEPARTMENT_NAME;
