DROP TABLE EMPLOYEE CASCADE CONSTRAINTS;
DROP TABLE DEPARTMENT CASCADE CONSTRAINTS;
DROP SEQUENCE SEQ_EMPLOYEE_ID;
DROP SEQUENCE SEQ_DEPARTMENT_ID;
CREATE TABLE EMPLOYEE (
    EMPLOYEE_ID     NUMBER,EMP_FIRSTNAME   VARCHAR2(20),EMP_LASTNAME    VARCHAR(20),DEPARTMENT_ID   NUMBER,SALARY          NUMBER
,EMP_EMAIL       VARCHAR2(40),CONSTRAINT EMPLOYEE_ID_PK PRIMARY KEY ( EMPLOYEE_ID )
);
CREATE TABLE DEPARTMENT (
    DEPARTMENT_ID     NUMBER,DEPARTMENT_NAME   VARCHAR2(20),CONSTRAINT DEPARTMENT_ID_PK PRIMARY KEY ( DEPARTMENT_ID
)
);
/
-- Add constraints for foreign keys
-- ON DELETE CASCADE
ALTER TABLE EMPLOYEE
    ADD CONSTRAINT FK_DEPARTMENT_ID FOREIGN KEY ( DEPARTMENT_ID )
        REFERENCES DEPARTMENT ( DEPARTMENT_ID );
        
-- Sequences
CREATE SEQUENCE SEQ_EMPLOYEE_ID START WITH 1 INCREMENT BY 1;
/
CREATE SEQUENCE SEQ_DEPARTMENT_ID START WITH 1 INCREMENT BY 1;
/

-- Triggers to auto increment pk 
CREATE OR REPLACE TRIGGER TRG_EMP_ID_AUTO BEFORE
    INSERT ON EMPLOYEE
    FOR EACH ROW
BEGIN
    SELECT SEQ_EMPLOYEE_ID.NEXTVAL INTO
        :NEW.EMPLOYEE_ID
    FROM DUAL;
END;
/
CREATE OR REPLACE TRIGGER TRG_DEP_ID_AUTO BEFORE
    INSERT ON DEPARTMENT
    FOR EACH ROW
BEGIN
    SELECT SEQ_DEPARTMENT_ID.NEXTVAL INTO
        :NEW.DEPARTMENT_ID
    FROM DUAL;
END;
/
-- Support only two departments
INSERT INTO DEPARTMENT ( DEPARTMENT_NAME ) VALUES ( 'Accounting' );
    INSERT INTO DEPARTMENT ( DEPARTMENT_NAME ) VALUES ( 'Finance' );
/

-- Make fictional EMPLOYEES
INSERT INTO EMPLOYEE (
    EMP_FIRSTNAME,EMP_LASTNAME,DEPARTMENT_ID,SALARY,EMP_EMAIL
) VALUES (
    'Yo','Sup',2,50000.00,'yosup@money.com'
);
INSERT INTO EMPLOYEE (
    EMP_FIRSTNAME,EMP_LASTNAME,DEPARTMENT_ID,SALARY,EMP_EMAIL
) VALUES (
    'Johnny','Cash',2,20000.00,'moneymoney@money.com'
);
INSERT INTO EMPLOYEE (
    EMP_FIRSTNAME,EMP_LASTNAME,DEPARTMENT_ID,SALARY,EMP_EMAIL
) VALUES (
    'Banana','Pancakes',2,43000.00,'syrup@money.com'
);
INSERT INTO EMPLOYEE (
    EMP_FIRSTNAME,EMP_LASTNAME,DEPARTMENT_ID,SALARY,EMP_EMAIL
) VALUES (
    'Toad','Shroom',2,23000.00,'gumba@mc.com'
);
INSERT INTO EMPLOYEE (
    EMP_FIRSTNAME,EMP_LASTNAME,DEPARTMENT_ID,SALARY,EMP_EMAIL
) VALUES (
    'Apps','Crash',1,10000.00,'always@money.com'
);
    INSERT INTO EMPLOYEE (
        EMP_FIRSTNAME,EMP_LASTNAME,DEPARTMENT_ID,SALARY,EMP_EMAIL
    ) VALUES (
        'Testing','Good',1,100000.00,'doit@now.com'
    );
/
CREATE OR REPLACE PROCEDURE SP_GIVE_RAISE (
-- out number due to plsql not supporting java.sql.Types.BOOLEAN
    VC_DEP_ID IN VARCHAR2,N_AVG_SALARY OUT NUMBER,INT_VALID IN OUT NUMBER
) AS
    N_TEMP NUMBER;
    B_BOOL BOOLEAN;
BEGIN
    IF
        INT_VALID = 0
    THEN
        B_BOOL := FALSE;
    ELSE
        B_BOOL := TRUE;
    END IF;
    SP_WRAPPER(VC_DEP_ID,N_AVG_SALARY,B_BOOL);
    IF
        B_BOOL = FALSE
    THEN
        INT_VALID := 0;
    ELSE
        INT_VALID := 1;
    END IF;
END;
/
CREATE OR REPLACE PROCEDURE SP_WRAPPER (
    VC_DEP_ID IN VARCHAR2,N_AVG_SALARY OUT NUMBER,B_VALID OUT BOOLEAN
) AS
    N_TEMP NUMBER;
BEGIN
    SELECT DEPARTMENT_ID INTO
        N_TEMP
    FROM DEPARTMENT
    WHERE DEPARTMENT_ID = VC_DEP_ID;
    IF
        N_TEMP = NULL
    THEN
        B_VALID := FALSE;
    ELSE
   -- update salary
        UPDATE EMPLOYEE SALARY
            SET
                SALARY = SALARY * 1.1
        WHERE DEPARTMENT_ID = VC_DEP_ID;
        SELECT AVG(SALARY) INTO
            N_AVG_SALARY
        FROM EMPLOYEE
        WHERE DEPARTMENT_ID = VC_DEP_ID;
        B_VALID := TRUE;
    END IF;
END;