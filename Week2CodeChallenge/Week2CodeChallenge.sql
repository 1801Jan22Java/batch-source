DROP TABLE EMPLOYEE CASCADE CONSTRAINTS;
DROP TABLE DEPARTMENT CASCADE CONSTRAINTS;


--CREATE TABLES
CREATE TABLE EMPLOYEE (
    EMPLOYEE_ID INTEGER PRIMARY KEY,
    EMP_FIRSTNAME VARCHAR2(100),
    EMP_LASTNAME VARCHAR2(100),
    DEPARTMENT_ID INTEGER,
    SALARY NUMBER(10,2),
    EMP_EMAIL VARCHAR2(100)
);
/

CREATE TABLE DEPARTMENT (
    DEPARTMENT_ID INTEGER PRIMARY KEY,
    DEPARTMENT_NAME VARCHAR2(100)
);
/

ALTER TABLE EMPLOYEE
ADD CONSTRAINT FK_DEPARTMENT
FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENT(DEPARTMENT_ID);
/

--CREATE SEQUENCES
CREATE SEQUENCE SQ_EMPLOYEE_PK
START WITH 1
INCREMENT BY 1;
/

CREATE SEQUENCE SQ_DEPARTMENT_PK
START WITH 1
INCREMENT BY 1;
/

--CREATE BEFORE INSERT TRIGGERS FOR SEQUENCES
CREATE OR REPLACE TRIGGER TR_INSERT_EMPLOYEE
BEFORE INSERT ON EMPLOYEE
FOR EACH ROW
BEGIN
  SELECT SQ_EMPLOYEE_PK.NEXTVAL INTO :NEW.EMPLOYEE_ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER TR_INSERT_DEPARTMENT
BEFORE INSERT ON DEPARTMENT
FOR EACH ROW
BEGIN
  SELECT SQ_DEPARTMENT_PK.NEXTVAL INTO :NEW.DEPARTMENT_ID FROM DUAL;
END;
/

--INSERT INTO DEPARTMENTS
INSERT INTO DEPARTMENT(DEPARTMENT_NAME) 
VALUES ('ELECTRONICS');

INSERT INTO DEPARTMENT(DEPARTMENT_NAME) 
VALUES ('APPLIANCES');

INSERT INTO DEPARTMENT(DEPARTMENT_NAME) 
VALUES ('CLOTHING');

--INSERT INTO EMPLOYEE
INSERT INTO EMPLOYEE(EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL) 
VALUES ('Bob', 'Jones', 1, 30000, 'bjones@employeecorp.com');

INSERT INTO EMPLOYEE(EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL) 
VALUES ('Tim', 'Stevens', 1, 28000, 'tstevens@employeecorp.com');

INSERT INTO EMPLOYEE(EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL) 
VALUES ('Rob', 'Johnson', 2, 40000, 'rjohnson@employeecorp.com');

INSERT INTO EMPLOYEE(EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL) 
VALUES ('Samantha', 'Smith', 2, 42000, 'ssmith@employeecorp.com');

INSERT INTO EMPLOYEE(EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL) 
VALUES ('Jessica', 'Chance', 3, 28000, 'jchance@employeecorp.com');

INSERT INTO EMPLOYEE(EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL) 
VALUES ('Sam', 'Doogan', 3, 28000, 'sdoogan@employeecorp.com');

--Create a stored procedure SP_GIVE_RAISE which takes in a DEPARTMENT_ID and increases
--each employee's salary within the department by 10%, and returns the new average salary for the
--department, as well as a boolean value indicating whether the ID entered corresponds to a valid department.

CREATE OR REPLACE PROCEDURE SP_GIVE_RAISE
(DEPT_ID IN EMPLOYEE.DEPARTMENT_ID%TYPE, AVG_SALARY OUT EMPLOYEE.SALARY%TYPE, VALID_DEPT OUT DEPARTMENT.DEPARTMENT_ID%TYPE)
IS

DEPT_ID_CHECK NUMBER;
IS_VALID BOOLEAN;
CURRENT_SALARY NUMBER(10,2);
EMPLOYEE_COUNT NUMBER;

BEGIN
        
    SELECT DEPARTMENT.DEPTARTMENT_ID INTO DEPT_ID_CHECK FROM DEPARTMENT WHERE EXISTS 
    (SELECT DEPARTMENT.DEPARTMENTID FROM DEPARTMENT WHERE DEPARTMENT.DEPARTMENTID = DEPT_ID);
    IF (DEPT_ID = 0) THEN
        IS_VALID := FALSE;
    END IF;
    
    IF (DEPT_ID <> 0) THEN
        IS_VALID := FALSE;
    END IF;

    VALID_DEPT := IS_VALID;
    
    SELECT SUM(EMPLOYEE.SALARY) INTO CURRENT_SALARY FROM EMPLOYEE HAVING EMPLOYEE.DEPARTMENTID = DEPT_ID;
    SELECT COUNT(EMPLOYEE.SALARY) INTO EMPLOYEE_COUNT FROM EMPLOYEE WHERE EMPLOYEE.DEPARTMENTID = DEPT_ID;
    
    
    AVG_SALARY := (CURRENT_SALARY * 1.1)/EMPLOYEE_COUNT;
    
END;
/
