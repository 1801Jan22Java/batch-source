SET SERVEROUTPUT ON;
--section 2.1
-- 1
SELECT * FROM EMPLOYEE;
-- 2
SELECT * FROM EMPLOYEE WHERE LASTNAME = 'King';
-- 3
SELECT * FROM EMPLOYEE 
WHERE FIRSTNAME = 'Andrew' 
AND REPORTSTO is NULL;


--section 2.2
-- 1
SELECT * FROM ALBUM ORDER BY TITLE DESC;
-- 2
SELECT FIRSTNAME FROM CUSTOMER ORDER BY CITY ASC;


--section 2.3
-- 1
INSERT INTO Genre (GenreId, Name) VALUES (26, '8-bit');
INSERT INTO Genre (GenreId, Name) VALUES (27, 'Human');

-- 2
INSERT INTO Employee (EmployeeId, LastName, FirstName, Title, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email) VALUES (9, 'Montana', 'Tony', 'IT Staff', TO_DATE('1978-5-17 00:00:00','yyyy-mm-dd hh24:mi:ss'), TO_DATE('2007-6-14 00:00:00','yyyy-mm-dd hh24:mi:ss'), '120 coca Ave', 'Edmonton', 'AB', 'Canada', 'T5K 2N1', '+1 (780) 428-8982', '+1 (780) 428-3957', 'tony@chinookcorp.com');
INSERT INTO Employee (EmployeeId, LastName, FirstName, Title, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email) VALUES (10, 'Adams', 'Abigail', 'IT Staff', TO_DATE('1992-3-28 00:00:00','yyyy-mm-dd hh24:mi:ss'), TO_DATE('2002-10-24 00:00:00','yyyy-mm-dd hh24:mi:ss'), '10 Jillian Ave ', 'Edmonton', 'AB', 'Canada', 'T5K 2N1', '+1 (780) 428-9222', '+1 (780) 428-7457', 'abigail@chinookcorp.com');

-- 3
INSERT INTO Customer (CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId) VALUES (60, 'Michael', 'Angelo', 'Apple', '32 wallaby way', 'Sydney', 'SP', 'Australia', '12227-000', '+55 (12) 3923-5555', '+55 (12) 3923-5566', 'michael@apple.com.br', 3);
INSERT INTO Customer (CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId) VALUES (60, 'Mitch', 'Angelo', 'Apple', '32 wallaby way', 'Sydney', 'SP', 'Australia', '12227-000', '+55 (12) 3923-5555', '+55 (12) 3923-5566', 'mitch@apple.com.br', 3);


--section 2.4
-- 1
UPDATE CUSTOMER
SET FIRSTNAME = 'Robert', LASTNAME = 'Walter'
WHERE FIRSTNAME = 'Aaron' AND LASTNAME = 'Mitchell';

-- 2
UPDATE ARTIST
SET NAME = 'CCR'
WHERE NAME = 'Creedence Clearwater Revival';


--section 2.5
SELECT * FROM INVOICE 
WHERE BILLINGADDRESS LIKE 'T%';


--section 2.6
-- 1
SELECT * FROM INVOICE
WHERE TOTAL BETWEEN 15 AND 20;

-- 2
SELECT * FROM EMPLOYEE
WHERE HIREDATE BETWEEN '1-JUN-03' AND '1-MAR-04';


--section 2.7
-- drop the old constraints
ALTER TABLE Invoice DROP CONSTRAINT FK_InvoiceCustomerId;
ALTER TABLE InvoiceLine DROP CONSTRAINT FK_InvoiceLineInvoiceId;

-- update them
ALTER TABLE Invoice ADD CONSTRAINT FK_InvoiceCustomerId
    FOREIGN KEY (CustomerId) REFERENCES Customer (CustomerId)  
    ON DELETE CASCADE;
ALTER TABLE InvoiceLine ADD CONSTRAINT FK_InvoiceLineInvoiceId
    FOREIGN KEY (InvoiceId) REFERENCES Invoice (InvoiceId)  
    ON DELETE CASCADE;
    
--Now that we've altered the constraints we can delete robert
DELETE FROM CUSTOMER 
WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter';


--section 3.1
-- 1
CREATE OR REPLACE FUNCTION CURR_TIME RETURN DATE 
AS
BEGIN
RETURN CURRENT_TIMESTAMP;
END;
/

SELECT CURR_TIME FROM DUAL;


-- 2
CREATE OR REPLACE FUNCTION STR_LENGTH(STR IN VARCHAR2) RETURN NUMBER 
AS
BEGIN
RETURN LENGTH(STR);
END;
/

SELECT STR_LENGTH('no me gusta SQL') FROM DUAL;


--section 3.2
-- 1
CREATE OR REPLACE FUNCTION AVG_INVOICES RETURN NUMBER AS AVE NUMBER;
CURSOR C IS
SELECT AVG(TOTAL) FROM INVOICE;

BEGIN
    OPEN C;
    FETCH C INTO AVE;
    CLOSE C;
    RETURN AVE;
END;
/

SELECT AVG_INVOICES FROM DUAL;

-- 2
CREATE OR REPLACE FUNCTION MOST_EXP_TRACK RETURN TRACK.NAME%TYPE AS EXP TRACK.NAME%TYPE;
CURSOR C IS
SELECT NAME FROM TRACK  WHERE UNITPRICE IN (SELECT MAX(UNITPRICE) FROM TRACK);
BEGIN
    OPEN C;
    FETCH C INTO EXP;
    CLOSE C;
    RETURN EXP;
END;
/

SELECT MOST_EXP_TRACK FROM DUAL;


--section 3.3
CREATE OR REPLACE FUNCTION AVG_INVOICELINE RETURN NUMBER AS AVE NUMBER;
CURSOR C IS
SELECT AVG(UNITPRICE) FROM INVOICELINE;

BEGIN
    OPEN C;
    FETCH C INTO AVE;
    CLOSE C;
    RETURN AVE;
END;
/

SELECT AVG_INVOICELINE FROM DUAL;


--section 3.4
CREATE OR REPLACE FUNCTION BORN_AFTER_68 RETURN SYS_REFCURSOR IS C SYS_REFCURSOR;

BEGIN
    OPEN C FOR SELECT FIRSTNAME FROM EMPLOYEE
    WHERE BIRTHDATE > '31-DEC-68';
    RETURN C;
END BORN_AFTER_68;
/

SELECT BORN_AFTER_68 FROM DUAL;


--section 4.1
CREATE OR REPLACE PROCEDURE Employee_names(CURSOR1 OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN CURSOR1 FOR
    SELECT FIRSTNAME, LASTNAME FROM Employee;
    DBMS_SQL.RETURN_RESULT(CURSOR1);
END;

DECLARE
VAR SYS_REFCURSOR;
BEGIN
Employee_names(CURSOR1=>VAR);
END;


--section 4.2
-- 1
CREATE OR REPLACE PROCEDURE Employee_update(EMAIL2 IN EMPLOYEE.EMAIL%TYPE, EID IN NUMBER)
AS
BEGIN
    UPDATE EMPLOYEE SET EMAIL = EMAIL2
    WHERE EMPLOYEE.EMPLOYEEID = EID;
END;

BEGIN
Employee_update('tony@revature.com', 3);
END;

-- 2
CREATE OR REPLACE PROCEDURE Employee_manager(MANAGER_FIRST OUT EMPLOYEE.FIRSTNAME%TYPE, MANAGER_LAST OUT EMPLOYEE.LASTNAME%TYPE, EID IN NUMBER)
AS
BEGIN
    SELECT FIRSTNAME, LASTNAME INTO MANAGER_FIRST, MANAGER_LAST 
    FROM EMPLOYEE
    WHERE EMPLOYEEID IN
    (SELECT REPORTSTO 
    FROM EMPLOYEE
    WHERE EMPLOYEE.EMPLOYEEID = EID); 
END;

DECLARE
VAR1 EMPLOYEE.FIRSTNAME%TYPE;
VAR2 EMPLOYEE.LASTNAME%TYPE;
BEGIN
Employee_manager(VAR1, VAR2, 3);
DBMS_OUTPUT.PUT_LINE(VAR1 || ' ' || VAR2);
END;


--SECTION 5.0
-- 1
CREATE OR REPLACE PROCEDURE Invoice_delete(IN_ID IN NUMBER)
AS
BEGIN
    DELETE FROM INVOICE
    WHERE INVOICEID = IN_ID;
END;

BEGIN
Invoice_delete(111);
COMMIT;
END;

-- 2
CREATE OR REPLACE PROCEDURE Insert_customer(C_ID IN NUMBER, FIRSTNAME1 IN CUSTOMER.FIRSTNAME%TYPE, LASTNAME1 IN CUSTOMER.LASTNAME%TYPE, EMAIL1 IN CUSTOMER.EMAIL%TYPE)
AS
BEGIN
    INSERT INTO CUSTOMER(CUSTOMERID, FIRSTNAME, LASTNAME, EMAIL)
    VALUES (C_ID, FIRSTNAME1, LASTNAME1, EMAIL1);
END;

BEGIN
Insert_customer(110, 'APE', 'KING', 'apeking@apekingdom.com');
COMMIT;
END;


--section 6.1
-- 1
CREATE OR REPLACE TRIGGER t
  AFTER
    INSERT 
  ON EMPLOYEE
  BEGIN
  CASE
    WHEN INSERTING THEN
      DBMS_OUTPUT.PUT_LINE('Inserting into employee');
  END CASE;
END;

-- 2
CREATE OR REPLACE TRIGGER t1
  AFTER
    INSERT 
  ON ALBUM
  BEGIN
  CASE
    WHEN INSERTING THEN
      DBMS_OUTPUT.PUT_LINE('Inserting into album');
  END CASE;
END;

-- 3
CREATE OR REPLACE TRIGGER t2
  AFTER
    DELETE 
  ON CUSTOMER
  BEGIN
  CASE
    WHEN DELETING THEN
      DBMS_OUTPUT.PUT_LINE('Deleting a customer');
  END CASE;
END;



--section 7.1
SELECT FIRSTNAME, LASTNAME, INVOICEID
FROM CUSTOMER INNER JOIN INVOICE
ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;


--section 7.2
SELECT INVOICE.CUSTOMERID, CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME, INVOICE.INVOICEID, INVOICE.TOTAL
FROM CUSTOMER FULL OUTER JOIN INVOICE
ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;


--section 7.3
SELECT NAME, TITLE
FROM ALBUM RIGHT JOIN ARTIST
ON ALBUM.ARTISTID = ARTIST.ARTISTID;


--section 7.4
SELECT *
FROM ALBUM CROSS JOIN ARTIST
ORDER BY NAME ASC;


--SECTION 7.5
SELECT A.FIRSTNAME, A.LASTNAME, B.FIRSTNAME, B.LASTNAME
FROM EMPLOYEE A JOIN EMPLOYEE B
ON A.REPORTSTO = B.EMPLOYEEID;


