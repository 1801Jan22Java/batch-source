--Create a database with two tables:
--EMPLOYEE
--Columns: EMPLOYEE_ID, EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL
--DEPARTMENT:
--Columns: DEPARTMENT_ID, DEPARTMENT_NAME
CREATE TABLE EMPLOYEE
(
    EMPLOYEE_ID NUMBER,
    EMPLOYEE_FIRST_NAME VARCHAR2(120),
    EMPLOYEE_LAST_NAME VARCHAR2(120),
    DEPARTMENT_ID NUMBER, 
    SALARY FLOAT,
    EMPLOYEE_EMAIL VARCHAR(120),
    CONSTRAINT PK_USER_ID 
    PRIMARY KEY (EMPLOYEE_ID)
);
CREATE TABLE DEPARTMENT
(
    DEPARTMENT_ID NUMBER,
    DEPARTMENT_NAME VARCHAR2(120),
    CONSTRAINT PK_DEPARTMENT_ID 
    PRIMARY KEY (DEPARTMENT_ID)
);
ALTER TABLE EMPLOYEE ADD CONSTRAINT FK_DEPARTMENT_ID
FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENT(DEPARTMENT_ID);
--Create a sequence and trigger to auto-generate primary key values for both tables. 
CREATE SEQUENCE EMPLOYEE_ID_SEQUENCE
MINVALUE 1001
MAXVALUE 9999
START WITH 1001
INCREMENT BY 1
CACHE 20;
CREATE SEQUENCE DEPARTMENT_ID_SEQUENCE
MINVALUE 1001
MAXVALUE 9999
START WITH 1001
INCREMENT BY 1
CACHE 20;
--TRIGGER
CREATE OR REPLACE TRIGGER EMPLOYEE_ID_TRIGGER
BEFORE INSERT ON EMPLOYEE
FOR EACH ROW
DECLARE 
NEW_EMPLOYEE_ID NUMBER;
BEGIN
    NEW_EMPLOYEE_ID := EMPLOYEE_ID_SEQUENCE.NEXTVAL;
    SELECT NEW_EMPLOYEE_ID INTO :NEW.EMPLOYEE_ID
    FROM DUAL;
END;
/
CREATE OR REPLACE TRIGGER DEPARTMENT_ID_TRIGGER
BEFORE INSERT ON DEPARTMENT
FOR EACH ROW
DECLARE 
NEW_DEPARTMENT_ID NUMBER;
BEGIN
    NEW_DEPARTMENT_ID := DEPARTMENT_ID_SEQUENCE.NEXTVAL;
    SELECT NEW_DEPARTMENT_ID INTO :NEW.DEPARTMENT_ID
    FROM DUAL;
END;
/
--Insert at least six employees and three departments. 
INSERT INTO DEPARTMENT(DEPARTMENT_ID, DEPARTMENT_NAME) VALUES(1,'ELECTRONICS');
INSERT INTO DEPARTMENT(DEPARTMENT_ID, DEPARTMENT_NAME) VALUES(2,'SALES');
INSERT INTO DEPARTMENT(DEPARTMENT_ID, DEPARTMENT_NAME) VALUES(3,'MANAGER');
INSERT INTO EMPLOYEE(EMPLOYEE_FIRST_NAME, EMPLOYEE_LAST_NAME, DEPARTMENT_ID, SALARY, EMPLOYEE_EMAIL) VALUES('PERSON1','MCPERSON',1001,25000,'PERSON1@GMAIL.COM');
INSERT INTO EMPLOYEE(EMPLOYEE_FIRST_NAME, EMPLOYEE_LAST_NAME, DEPARTMENT_ID, SALARY, EMPLOYEE_EMAIL) VALUES('PERSON2','MCPERSON',1001,25000,'PERSON1@GMAIL.COM');
INSERT INTO EMPLOYEE(EMPLOYEE_FIRST_NAME, EMPLOYEE_LAST_NAME, DEPARTMENT_ID, SALARY, EMPLOYEE_EMAIL) VALUES('PERSON3','MCPERSON',1002,25000,'PERSON1@GMAIL.COM');
INSERT INTO EMPLOYEE(EMPLOYEE_FIRST_NAME, EMPLOYEE_LAST_NAME, DEPARTMENT_ID, SALARY, EMPLOYEE_EMAIL) VALUES('PERSON4','MCPERSON',1002,25000,'PERSON1@GMAIL.COM');
INSERT INTO EMPLOYEE(EMPLOYEE_FIRST_NAME, EMPLOYEE_LAST_NAME, DEPARTMENT_ID, SALARY, EMPLOYEE_EMAIL) VALUES('PERSON5','MCPERSON',1003,25000,'PERSON1@GMAIL.COM');
INSERT INTO EMPLOYEE(EMPLOYEE_FIRST_NAME, EMPLOYEE_LAST_NAME, DEPARTMENT_ID, SALARY, EMPLOYEE_EMAIL) VALUES('PERSON6','MCPERSON',1003,25000,'PERSON1@GMAIL.COM');

--Create a stored procedure SP_GIVE_RAISE which takes in a DEPARTMENT_ID and increases each 
--employee's salary within the department by 10%, and returns the new average salary for the 
--department, as well as a boolean value indicating whether the ID entered corresponds to a valid
--department. 
CREATE OR REPLACE PROCEDURE SP_GIVE_RAISE
(EMPLOYEEID IN NUMBER, NEW_SALARY OUT FLOAT, VALID_ID OUT BOOLEAN)
IS
    OLDSALARY FLOAT;
BEGIN
    SELECT SALARY INTO OLDSALARY FROM EMPLOYEE WHERE EMPLOYEE_ID = EMPLOYEEID;
    NEW_SALARY := OLDSALARY*1.1;
    UPDATE EMPLOYEE SET SALARY=NEW_SALARY WHERE EMPLOYEE_ID = EMPLOYEEID;
    VALID_ID := TRUE;
END;
/

