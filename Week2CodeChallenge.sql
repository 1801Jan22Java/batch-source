--Create a database with two tables:
--EMPLOYEE
--Columns: EMPLOYEE_ID, EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL
--DEPARTMENT:
--Columns: DEPARTMENT_ID, DEPARTMENT_NAME
SET SERVEROUTPUT ON;
DROP TABLE DEPARTMENT;
DROP TABLE EMPLOYEE;

/*
CREATE TABLES
*/

CREATE TABLE EMPLOYEE
(
    EMPLOYEE_ID NUMBER,
    EMP_FIRSTNAME VARCHAR2(40),
    EMP_LASTNAME VARCHAR2(40),
    DEPARTMENT_ID NUMBER,
    SALARY DECIMAL(38,2),
    EMP_EMAIL VARCHAR2(40)
);

CREATE TABLE DEPARTMENT
(
    DEPARTMENT_ID NUMBER,
    DEPARTMENT_NAME VARCHAR2(40)
);

/*
ADD CONSTRAINTS
*/

ALTER TABLE EMPLOYEE ADD CONSTRAINT PK_EMPID
PRIMARY KEY (EMPLOYEE_ID);

ALTER TABLE DEPARTMENT ADD CONSTRAINT PK_DEPID
PRIMARY KEY (DEPARTMENT_ID);

ALTER TABLE EMPLOYEE ADD CONSTRAINT FK_DEPID
FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENT (DEPARTMENT_ID);

/*
MAKE SEQUENCES/TRIGGERS
*/

CREATE SEQUENCE EMP_SEQ
START WITH 1000
INCREMENT BY 1
NOCACHE
NOCYCLE;

CREATE SEQUENCE DEP_SEQ
START WITH 1000
INCREMENT BY 1
NOCACHE
NOCYCLE;

CREATE OR REPLACE TRIGGER EMP_ADD_ID
BEFORE INSERT ON EMPLOYEE
FOR EACH ROW
BEGIN
SELECT EMP_SEQ.NEXTVAL
INTO :new.EMPLOYEE_ID
FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER DEP_ADD_ID
BEFORE INSERT ON DEPARTMENT
FOR EACH ROW
BEGIN
SELECT DEP_SEQ.NEXTVAL
INTO :new.DEPARTMENT_ID
FROM DUAL;
END;
/

/* 
INSERTING EMPLOYEES / DEPARTMENTS
*/

INSERT INTO DEPARTMENT VALUES(0,'ENGINEERING');
INSERT INTO DEPARTMENT VALUES(0,'HR');
INSERT INTO DEPARTMENT VALUES(0,'SALES');

INSERT INTO EMPLOYEE VALUES(0,'TEST1','TEST2',1003,100,'JDOE@COMPANY.ORG');
INSERT INTO EMPLOYEE VALUES(0,'TEST3','TEST4',1004,100,'JDOE@COMPANY.ORG');
INSERT INTO EMPLOYEE VALUES(0,'TEST5','TEST6',1005,200,'JDOE@COMPANY.ORG');
INSERT INTO EMPLOYEE VALUES(0,'TEST7','TEST8',1003,200,'JDOE@COMPANY.ORG');
INSERT INTO EMPLOYEE VALUES(0,'TEST9','TEST10',1004,300,'JDOE@COMPANY.ORG');
INSERT INTO EMPLOYEE VALUES(0,'TEST11','TEST12',1005,300,'JDOE@COMPANY.ORG');

/*
MAKING STORED PROCEDURES
*/

CREATE OR REPLACE PROCEDURE SP_GIVE_RAISE
(
    DEP_ID IN DEPARTMENT.DEPARTMENT_ID%TYPE,
    NEW_AVG OUT EMPLOYEE.SALARY%TYPE,
    VALID OUT NUMBER
)
IS
MY_CURSOR SYS_REFCURSOR;
EM_ID EMPLOYEE.EMPLOYEE_ID%TYPE;
EM_SAL EMPLOYEE.SALARY%TYPE;
BEGIN
    
    GET_EMP_ID(DEP_ID,MY_CURSOR);
    LOOP
        FETCH MY_CURSOR INTO EM_ID,EM_SAL;
        UPDATE EMPLOYEE
        SET SALARY = (EM_SAL*1.1)
        WHERE EMPLOYEE_ID = EM_ID;
        EXIT WHEN MY_CURSOR%NOTFOUND;
    END LOOP;
    IF EM_ID IS NULL THEN
        VALID := 1;
    ELSE
        VALID := 0;
    END IF;
    SELECT AVG(SALARY) INTO NEW_AVG FROM EMPLOYEE WHERE DEPARTMENT_ID = DEP_ID;
END;
/

CREATE OR REPLACE PROCEDURE GET_EMP_ID
(
    DEP_ID IN DEPARTMENT.DEPARTMENT_ID%TYPE,
    MY_C OUT SYS_REFCURSOR
)
AS
BEGIN
    OPEN MY_C FOR
    SELECT EMPLOYEE_ID,SALARY
    FROM EMPLOYEE
    WHERE DEPARTMENT_ID = DEP_ID;
    
END;
/
SELECT SALARY FROM EMPLOYEE WHERE DEPARTMENT_ID = 1003;


--
--DECLARE
--AVG_NUM EMPLOYEE.SALARY%TYPE;
--BOOL NUMBER;
--BEGIN
--
--SP_GIVE_RAISE(1012,AVG_NUM,BOOL);
--IF BOOL = 1 THEN
--    DBMS_OUTPUT.PUT_LINE('DEPARTMENT NOT VALID');
--ELSE
--DBMS_OUTPUT.PUT_LINE('THE NEW AVERAGE IS: ' || AVG_NUM);
--END IF;
--END;
--/
