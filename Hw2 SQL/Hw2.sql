--2.1 SELECT
SELECT * FROM EMPLOYEE;
SELECT * FROM EMPLOYEE WHERE(LASTNAME ='King');
SELECT * FROM EMPLOYEE WHERE(FIRSTNAME = 'Andrew' AND REPORTSTO IS NULL);
-- 2.2 ORDER BY 
SELECT * FROM ALBUM 
ORDER BY TITLE DESC;
SELECT * FROM CUSTOMER
ORDER BY CITY;
--2.3 INSERT INTO
INSERT INTO GENRE 
VALUES (26, 'Alternative Rock');
INSERT INTO GENRE 
VALUES(27,'House');

INSERT INTO EMPLOYEE (EMPLOYEEID,LASTNAME,FIRSTNAME) 
VALUES(9,'Crystal','Billy');

INSERT INTO EMPLOYEE (EMPLOYEEID,LASTNAME,FIRSTNAME)
VALUES(10,'Smith','Will');

INSERT INTO CUSTOMER (CUSTOMERID,LASTNAME,FIRSTNAME,EMAIL)
VALUES(60,'Gates','Bill','BillGates@gmail.com');

INSERT INTO CUSTOMER (CUSTOMERID,LASTNAME,FIRSTNAME,EMAIL)
VALUES(61,'Hanks','Tom','TomHanks@gmail.com');

--2.4
UPDATE CUSTOMER 
SET FIRSTNAME = 'Robert', LASTNAME ='Walker'
WHERE(CUSTOMERID = 32);

UPDATE ARTIST 
SET NAME ='CCR'
WHERE (ARTISTID =76);
--2.5
SELECT * FROM INVOICE
WHERE(BILLINGADDRESS LIKE 'T%');
--2.6
SELECT * FROM INVOICE 
WHERE TOTAL BETWEEN 15 AND 50;

SELECT * FROM EMPLOYEE 
WHERE HIREDATE BETWEEN '1-JUN-03' AND '1-MAR-04';
--2.7
DELETE FROM INVOICE
WHERE CUSTOMERID = 32
DELETE FROM CUSTOMER 
WHERE FIRSTNAME ='Robert' AND LASTNAME ='Walker';
-- 3 SQL FUNCTIONS
--3.1 PART A
CREATE FUNCTION DATEANDTIME
RETURN TIMESTAMP
IS 
DATE_VARIABLE TIMESTAMP;

BEGIN 
SELECT CURRENT_TIMESTAMP INTO DATE_VARIABLE FROM DUAL;
RETURN DATE_VARIABLE;
END;
/

SELECT DATEANDTIME FROM DUAL;
--3.1 PART B

CREATE OR REPLACE FUNCTION LENGTHOFNAME (POSITION_VARIABLE NUMBER)
RETURN NUMBER
IS
LENGTH_VARIABLE NUMBER;
BEGIN 
SELECT LENGTH( NAME) INTO LENGTH_VARIABLE 
FROM MEDIATYPE WHERE (MEDIATYPEID = POSITION_VARIABLE);
RETURN LENGTH_VARIABLE;
END;
/
SELECT LENGTHOFNAME(2) FROM DUAL;
--3.2 PART A
CREATE OR REPLACE FUNCTION AVERAGE_OF_TOTAL
RETURN FLOAT
IS 
AVERAGE_VARIABLE FLOAT;
BEGIN 
SELECT AVG(TOTAL)INTO AVERAGE_VARIABLE FROM INVOICE;
RETURN AVERAGE_VARIABLE;
END;
/
SELECT AVERAGE_OF_TOTAL FROM DUAL;
--3.2 PART B
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE GET_EXPENSIVE(S OUT SYS_REFCURSOR)
IS 
BEGIN 
OPEN S FOR 
SELECT NAME,UNITPRICE FROM TRACK;
END;
/

DECLARE 
S SYS_REFCURSOR; 
TRACK_NAME TRACK.NAME%TYPE;
UNITPRICE_NAME TRACK.UNITPRICE%TYPE;
BEGIN 
    GET_EXPENSIVE(S);
    LOOP 
    FETCH S INTO TRACK_NAME,UNITPRICE_NAME;
    EXIT WHEN S%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE('THE TRACK' ||TRACK_NAME|| ' COSTS ' || UNITPRICE_NAME);
    END LOOP;
    CLOSE S;
END;
/

--3.3


--3.4 


CREATE TYPE EMPLOYEE_TABLE IS OBJECT(
EmployeeId NUMBER,
LastName VARCHAR2(20),
FirstName VARCHAR2(20),
Title VARCHAR2(30),
ReportsTo NUMBER,
BirthDate DATE,
HireDate DATE,
Address VARCHAR2(70),
City VARCHAR2(40),
State VARCHAR2(40),
Country VARCHAR2(40),
PostalCode VARCHAR2(10),
Phone VARCHAR2(24),
Fax VARCHAR2(24),
Email VARCHAR2(60));
/
CREATE TYPE RECORDS_INFO IS TABLE OF EMPLOYEE_TABLE;
/
CREATE OR REPLACE FUNCTION GET_INFO(AGE IN NUMBER)
RETURN RECORDS_INFO PIPELINED IS 
BEGIN 
    FOR I IN (SELECT * FROM EMPLOYEE WHERE EXTRACT(YEAR FROM Birthdate)> AGE) loop
    PIPE ROW(EMPLOYEE_TABLE(I.EmployeeId,I.LastName,I.FirstName,I.Title,I.ReportsTo,
    I.Birthdate,I.Hiredate,I.Address,I.City,I.State,I.Country,I.Postalcode,I.Phone,I.Fax,
    I.Email));
    END LOOP;
    RETURN;
END;
/
SELECT * FROM TABLE(GET_INFO(68));

--4.0 STORED PROCEDURES 
--4.1 
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE GET_NAMES(S OUT SYS_REFCURSOR)
IS 
BEGIN 
OPEN S FOR 
SELECT FIRSTNAME,LASTNAME FROM EMPLOYEE;
END;
/

DECLARE 
S SYS_REFCURSOR; 
F_NAME EMPLOYEE.FIRSTNAME%TYPE;
L_NAME EMPLOYEE.LASTNAME%TYPE;
BEGIN 
    GET_NAMES(S);
    LOOP 
    FETCH S INTO F_NAME,L_NAME;
    EXIT WHEN S%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE(F_NAME|| ' ' || L_NAME);
    END LOOP;
    CLOSE S;
END;
/
--4.2 PART A
CREATE OR REPLACE PROCEDURE UPDATE_PERSONAL_INFO(ID_NUM IN NUMBER,L_NAME IN VARCHAR2)
AS
BEGIN
UPDATE EMPLOYEE 
SET LASTNAME = L_NAME
WHERE EMPLOYEEID = ID_NUM;
END;
/
BEGIN
UPDATE_PERSONAL_INFO(2,'GDSFGFD');
END;
/
-- 4.2 PART B
SET SERVEROUTPUT ON;
DECLARE 
HOLDER VARCHAR2 (200);
MANAGER_FIRST VARCHAR (200);
MANAGER_LAST VARCHAR (200);
BEGIN 
SELECT TITLE INTO HOLDER FROM EMPLOYEE WHERE EMPLOYEEID = 8;
IF( HOLDER = 'IT Staff') THEN 
    SELECT FIRSTNAME INTO MANAGER_FIRST FROM EMPLOYEE WHERE TITLE ='IT Manager';
    SELECT LASTNAME INTO MANAGER_LAST FROM EMPLOYEE WHERE TITLE ='IT Manager';
    DBMS_OUTPUT.PUT_LINE(MANAGER_FIRST||' '||MANAGER_LAST);
    END IF;
    

END;
/

-- 4.3
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE CUSTOMER_COMPANY(CUSTOMER_ID NUMBER)
AS 
CUSTOMER_FIRST VARCHAR2(200);
CUSTOMER_LAST VARCHAR2(200);
COMPS VARCHAR2(200);
BEGIN 
SELECT FIRSTNAME INTO CUSTOMER_FIRST FROM CUSTOMER WHERE CUSTOMERID = CUSTOMER_ID;
SELECT LASTNAME INTO CUSTOMER_LAST FROM CUSTOMER WHERE CUSTOMERID  = CUSTOMER_ID;
SELECT COMPANY INTO COMPS FROM CUSTOMER WHERE CUSTOMERID = CUSTOMER_ID;

DBMS_OUTPUT.PUT_LINE('Customer '||CUSTOMER_FIRST||' '||CUSTOMER_LAST||' is from '||COMPS);
END;
/
BEGIN CUSTOMER_COMPANY(1); END;

--5.0

COMMIT;
SAVEPOINT;
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE GET_INVOICES(S OUT SYS_REFCURSOR,INVOICE_ID NUMBER)
IS 
BEGIN 
OPEN S FOR 
SELECT INVOICELINEID FROM INVOICELINE WHERE INVOICEID = INVOICE_ID;
END;
/

CREATE OR REPLACE PROCEDURE INVOICE_DELETION(INVOICE_ID NUMBER)
AS
S SYS_REFCURSOR; 
INVOICELINE_ID INVOICELINE.INVOICELINEID%TYPE;
BEGIN 
--DBMS_OUTPUT.PUT_LINE('INVOICE ID WAS'||INVOICE_ID);
    GET_INVOICES(S,INVOICE_ID);
    LOOP 
    FETCH S INTO INVOICELINE_ID;
    EXIT WHEN S%NOTFOUND;
    DELETE FROM INVOICELINE 
    WHERE INVOICELINEID = INVOICELINE_ID;
    --DBMS_OUTPUT.PUT_LINE(INVOICELINE_ID);

    END LOOP;
    CLOSE S;
    DELETE FROM INVOICE WHERE INVOICEID = INVOICE_ID;
    COMMIT;
END;
/
BEGIN INVOICE_DELETION(1); END;

--5.0 PART B
CREATE OR REPLACE PROCEDURE NEW_RECORD(CUSTOMER_ID NUMBER,F_NAME VARCHAR2,L_NAME VARCHAR2,E_MAIL VARCHAR2)
AS 
BEGIN 
    BEGIN 
        INSERT INTO CUSTOMER (CUSTOMERID,FIRSTNAME,LASTNAME,EMAIL)VALUES(CUSTOMER_ID,F_NAME,L_NAME,E_MAIL);
    END;
END;
/

BEGIN NEW_RECORD(67,'JFDKLS','FJDSL','FJKDSL'); END;

--6.1
SET SERVEROUTPUT ON
CREATE OR REPLACE TRIGGER NEW_RECORD_TRIGGER
AFTER INSERT ON EMPLOYEE 
FOR EACH ROW 
BEGIN 
  DBMS_OUTPUT.PUT_LINE('YOU INSERTED A ROW');   
END;
/
--6.1 PART B
SET SERVEROUTPUT ON
CREATE OR REPLACE TRIGGER NEW_ALBUM_TRIGGER 
AFTER UPDATE ON ALBUM 
FOR EACH ROW 
BEGIN 
    DBMS_OUTPUT.PUT_LINE('YOU UPDATED A ROW');     
END;
/
BEGIN
UPDATE ALBUM SET TITLE ='FJKDL' WHERE(ALBUMID = 1);
END;
--6.1 PART C
SET SERVEROUTPUT ON
CREATE OR REPLACE TRIGGER NEW_CUSTOMER_TRIGGER 
AFTER DELETE ON CUSTOMER 
FOR EACH ROW 
BEGIN 
   DBMS_OUTPUT.PUT_LINE('YOU DELETED A ROW'); 
END;
/
--7.0
--7.1 INNER JOIN 
SELECT CUSTOMER.CUSTOMERID,INVOICE.INVOICEID
FROM CUSTOMER 
INNER JOIN INVOICE ON CUSTOMER.CUSTOMERID = INVOICE.INVOICEID;
-- 7.2 OUTER
SELECT CUSTOMER.FIRSTNAME,CUSTOMER.LASTNAME,INVOICE.INVOICEID,INVOICE.TOTAL,
INVOICE.CUSTOMERID,CUSTOMER.CUSTOMERID
FROM INVOICE,CUSTOMER
WHERE INVOICE.CUSTOMERID = CUSTOMER.CUSTOMERID(+);
--7.3
SELECT ALBUM.TITLE,ARTIST.NAME
FROM ALBUM 
RIGHT JOIN ARTIST ON ARTIST.NAME = ALBUM.TITLE;
--7.4 CROSS
SELECT *
FROM ARTIST 
CROSS JOIN ALBUM ORDER BY ARTIST.NAME;
-- 7.5
SELECT EMPLOYEE.REPORTSTO , EMPLOYEE.REPORTSTO AS BLEH
FROM EMPLOYEE
LEFT OUTER JOIN EMPLOYEE EMPLOYEE.REPORTSTO = BELH ;


