--Inner
SELECT ALBUM.TITLE
FROM ARTIST INNER JOIN ALBUM
ON ARTIST.ARTISTID = ALBUM.ARTISTID
WHERE ARTIST.ARTISTID = 50;

--OUTER RIGHT

SELECT *
FROM ARTIST RIGHT JOIN ALBUM
ON ARTIST.ARTISTID = ALBUM.ARTISTID
WHERE ARTIST.ARTISTID = 50;

--OUTER LEFT
SELECT *
FROM ARTIST LEFT JOIN ALBUM
ON ARTIST.ARTISTID = ALBUM.ARTISTID
WHERE ARTIST.ARTISTID = 50;

--FULL OUTER JOIN
SELECT *
FROM ARTIST FULL JOIN ALBUM
ON ARTIST.ARTISTID = ALBUM.ARTISTID
WHERE ARTIST.ARTISTID = 50;

--SET OPS
--UNION ALL
SELECT TITLE FROM ALBUM
UNION ALL
SELECT NAME FROM GENRE;

--UNION
SELECT CITY FROM EMPLOYEE
UNION
SELECT CITY FROM CUSTOMER;

--INTERSECT
SELECT CITY FROM EMPLOYEE
INTERSECT
SELECT CITY FROM CUSTOMER;

--MINUS
SELECT FIRSTNAME FROM CUSTOMER
MINUS
SELECT FIRSTNAME FROM EMPLOYEE;

--SCALAR
SELECT LENGTH(LASTNAME) AS LEN FROM CUSTOMER ORDER BY LEN DESC;

--AGGREGATE
SELECT AVG(UNITPRICE) FROM TRACK;

SELECT COUNT(*) FROM TRACK WHERE UNITPRICE > 1;

--SEQUENCE
CREATE SEQUENCE STUDENTS_1;

SELECT A.EMPLOYEEID AS EMP, B.EMPLOYEEID AS SUP
FROM EMPLOYEE A JOIN EMPLOYEE B
ON A.REPORTSTO=B.EMPLOYEEID;

CREATE VIEW TEST
AS SELECT NAME FROM ARTIST;

SELECT STUDENTS_1.NEXTVAL FROM DUAL;

CREATE SEQUENCE STUDENTS_2
MAXVALUE 50
START WITH 20
INCREMENT BY 3;

SELECT STUDENTS_2.NEXTVAL FROM DUAL;

CREATE VIEW MY_VIEW
AS SELECT ARTIST.NAME, ALBUM.TITLE
FROM ALBUM INNER JOIN ARTIST
ON ALBUM.ARTISTID=ARTIST.ARTISTID;

SELECT NAME FROM MY_VIEW WHERE NAME LIKE 'I%';

CREATE SEQUENCE IDUNNO
START WITH -5
INCREMENT BY -5;

SELECT IDUNNO.NEXTVAL FROM DUAL;

/* 
1.Find the average number of songs per album for a given artist(artist Id is ok)
ex. CREATE FUNCTION AVGSONG....

TO CALL FUNCTION:
BEGIN
AVGSONG(PARAMETER1);
END; */
SELECT COUNT(*) FROM TRACK T 
INNER JOIN ALBUM L ON T.ALBUMID=L.ALBUMID 
INNER JOIN ARTIST A ON A.ARTISTID=L.ARTISTID WHERE A.ARTISTID=5;

SELECT COUNT(*) FROM ALBUM L
INNER JOIN ARTIST A ON A.ARTISTID=L.ARTISTID WHERE A.ARTISTID=5;

SELECT A / B FROM
(SELECT COUNT(*) AS A FROM TRACK T 
INNER JOIN ALBUM L ON T.ALBUMID=L.ALBUMID 
INNER JOIN ARTIST A ON A.ARTISTID=L.ARTISTID WHERE A.ARTISTID=13),
(SELECT COUNT(*) AS B FROM ALBUM L
INNER JOIN ARTIST A ON A.ARTISTID=L.ARTISTID WHERE A.ARTISTID=13);

CREATE OR REPLACE FUNCTION AVGSONG
    (GIVENID IN NUMBER)
    RETURN FLOAT AS A_P_A FLOAT;
    BEGIN
        SELECT A / B
        INTO A_P_A
        FROM
        (SELECT COUNT(*) AS A FROM TRACK T 
        INNER JOIN ALBUM L ON T.ALBUMID=L.ALBUMID 
        INNER JOIN ARTIST A ON A.ARTISTID=L.ARTISTID WHERE A.ARTISTID=GIVENID),
        (SELECT COUNT(*) AS B FROM ALBUM L
        INNER JOIN ARTIST A ON A.ARTISTID=L.ARTISTID WHERE A.ARTISTID=GIVENID);
        RETURN A_P_A;
    END;
/

SELECT AVGSONG(50) FROM DUAL;

-- CURSORS
SET SERVEROUTPUT ON;

-- PROCEDURE DECLARED AS OUT PARAMETER
CREATE OR REPLACE PROCEDURE GET_ALL_ALBUMS (S OUT SYS_REFCURSOR)
IS
BEGIN
OPEN S FOR
SELECT ALBUMID, TITLE FROM ALBUM;
END;
/

DECLARE 
S SYS_REFCURSOR;
ALBUM_ID ALBUM.ALBUMID%TYPE;
ALBUMNAME ALBUM.TITLE%TYPE;
BEGIN
    GET_ALL_ALBUMS(S);
    LOOP
        FETCH S INTO ALBUM_ID, ALBUMNAME;
        EXIT WHEN S%NOTFOUND; -- BREAK FROM LOOP WHEN NO MORE ROWS ARE AVAILABLE
        DBMS_OUTPUT.PUT_LINE(ALBUM_ID || ' IS CURRENT ID, ' || ALBUMNAME || ' IS CURRENT NAME.');
    END LOOP;
    CLOSE S;
END;