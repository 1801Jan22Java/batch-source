-----------------------------TABLE CREATION------------------------

--Creating USERS table
CREATE TABLE USERS (
user_id INT,
user_name VARCHAR2(50),
user_pass VARCHAR2(50),
first_name VARCHAR2(50),
last_name VARCHAR(50),
super_user INT,
CONSTRAINT PK_USERS PRIMARY KEY (user_id)
);

--Creating ACCOUNTS table
CREATE TABLE ACCOUNTS (
account_id INT,
account_type_id INT,
balance FLOAT,
user_id INT,
CONSTRAINT PK_Accounts PRIMARY KEY (account_id)
);

--Creating ACCOUNT_TYPE Table
CREATE TABLE ACCOUNT_TYPE
(
account_type_id INT,
account_type VARCHAR(9),
CONSTRAINT PK_Account_Type PRIMARY KEY (account_type_id)
);

--Creating ACCOUNT_TRANSACTION Table
CREATE TABLE ACCOUNT_TRANSACTION
(
transaction_id INT,
user_id INT,
account_id INT,
date_of_transaction DATE,
CONSTRAINT PK_Account_Transaction PRIMARY KEY(transaction_id)
);
COMMIT;

------------------------ALTERING TABLES----------------
ALTER TABLE ACCOUNTS ADD CONSTRAINT FK_USER_ID 
FOREIGN KEY (User_ID) REFERENCES USERS (User_ID);

ALTER TABLE ACCOUNTS ADD CONSTRAINT FK_ACCOUNT_TYPE_ID
FOREIGN KEY (account_type_id) REFERENCES ACCOUNT_TYPE(account_type_id);

ALTER TABLE ACCOUNT_TRANSACTION ADD CONSTRAINT FK_USER_TRANS_ID
FOREIGN KEY (User_ID) REFERENCES USERS (USer_ID);

ALTER TABLE ACCOUNT_TRANSACTION ADD CONSTRAINT FK_ACCOUNT_ID
FOREIGN KEY (account_id) REFERENCES ACCOUNTS (account_id);

ALTER TABLE USERS ADD SSN VARCHAR2(13);
COMMIT;
/

------------------------------ADDING CONSTRAINTS--------------------
ALTER TABLE USERS ADD CONSTRAINT unique_SSN
UNIQUE (SSN);
/
ALTER TABLE USERS ADD CONSTRAINT unique_username
UNIQUE (user_name);
/
ALTER TABLE ACCOUNT_TYPE ADD CONSTRAINT unique_account_type
UNIQUE (account_type);
/
ALTER TABLE ACCOUNTS ADD CONSTRAINT greater_than_zero
CHECK(BALANCE >= 0);
/

ALTER TABLE ACCOUNT_TRANSACTION ADD Transaction_Desc VARCHAR(25);
/


------------------------ GENERATE SEQUENCES FOR TABLES

CREATE SEQUENCE user_seq
MINVALUE 1000
START WITH 1000
INCREMENT BY 1;
/
CREATE SEQUENCE account_tx_seq
MINVALUE 0
START WITH 0
INCREMENT BY 1;
/
CREATE SEQUENCE account_seq
MINVALUE 1000
START WITH 1000
INCREMENT BY 1;
/


-----------------------------CREATING PROCEDURES-----------------
--SP_DELETE_USER: For deleting users.
CREATE OR REPLACE PROCEDURE SP_DELETE_USER
(
USERID IN INT)
AS
BEGIN
DELETE FROM USERS WHERE USER_ID=USERID;
COMMIT;
END;
/

--NEW_USER_PROC : For creating new users
CREATE OR REPLACE PROCEDURE NEW_USER_PROC
(
USERNAME IN VARCHAR2,
USERPASS IN VARCHAR2,
FIRSTNAME IN VARCHAR2,
LASTNAME IN VARCHAR2,
SUPERUSER IN INT,
SSN IN VARCHAR2
)
AS
BEGIN
INSERT INTO USERS VALUES(USER_SEQ.nextVal,username,userpass,firstname,lastname,superuser, ssn);
commit;
END;
/
--SP_NEW_ACCOUNT : For creating new accounts
CREATE OR REPLACE PROCEDURE SP_NEW_ACCOUNT
(
ACCOUNT_TYPE_ID IN INT,
BALANCE IN FLOAT,
USER_ID IN INT)
AS 
BEGIN
INSERT INTO ACCOUNTS VALUES(ACCOUNT_SEQ.nextVal,ACCOUNT_TYPE_ID,BALANCE,USER_ID);
COMMIT;
END;
/

--SP_MAKE_DEPOSIT: For making deposits
CREATE OR REPLACE PROCEDURE SP_MAKE_DEPOSIT

(
ACCOUNTID INT,
AMOUNT IN FLOAT
)
AS 
BEGIN 
    
UPDATE ACCOUNTS SET BALANCE = BALANCE + AMOUNT WHERE ACCOUNT_ID =ACCOUNTID;
INSERT INTO ACCOUNT_TRANSACTION 
    (Transaction_ID,USER_ID,ACCOUNT_ID,DATE_OF_TRANSACTION,TRANSACTION_DESC)
    SELECT account_tx_seq.nextval,USER_ID,ACCOUNT_ID, CURRENT_TIMESTAMP, 'Deposit made'
    FROM ACCOUNTS WHERE ACCOUNT_ID = ACCOUNTID AND USER_ID = USER_ID;
COMMIT;
END;
/

--SP_MAKE_WITHDRAWAL : For making withdrawals
CREATE OR REPLACE PROCEDURE SP_MAKE_WITHDRAWAL
(
ACCOUNTID IN INT,
AMOUNT IN FLOAT
)
AS 
BEGIN 
UPDATE ACCOUNTS SET BALANCE = BALANCE - AMOUNT WHERE ACCOUNT_ID =ACCOUNTID ;
INSERT INTO ACCOUNT_TRANSACTION 
    (Transaction_ID,USER_ID,ACCOUNT_ID,DATE_OF_TRANSACTION,TRANSACTION_DESC)
    SELECT account_tx_seq.nextval,USER_ID,ACCOUNT_ID, CURRENT_TIMESTAMP, 'Withdrawal made'
    FROM ACCOUNTS WHERE ACCOUNT_ID = ACCOUNTID AND USER_ID = USER_ID;
COMMIT;
END;
/

--SP_DELETE_ACCOUNT : FOr deleting accounts
CREATE OR REPLACE PROCEDURE SP_DELETE_ACCOUNT
(
ACC_ID IN INT
)
AS BEGIN 
DELETE FROM ACCOUNTS WHERE ACCOUNT_ID = ACC_ID;
COMMIT;
END;
/
--SP_NEW_ACCOUNT_TYPE: For creating new account types
CREATE OR REPLACE PROCEDURE SP_NEW_ACCOUNT_TYPE
(
ACCOUNT_TYPE_ID IN INT,
ACCOUNT_TYPE IN VARCHAR2
)
AS
BEGIN
INSERT INTO ACCOUNT_TYPE VALUES(ACCOUNT_TYPE_ID,ACCOUNT_TYPE);
COMMIT;
END;
/

/*
exec NEW_USER_PROC('testuser','testpass','testname','testlname',1,'123-45-0000');
SELECT * FROM USERS;
exec SP_DELETE_USER(1003);
commit;

exec SP_NEW_ACCOUNT_TYPE(2,'Checking');
exec SP_NEW_ACCOUNT_TYPE(1,'Savings');
exec SP_DELETE_ACCOUNT(1002);
SELECT * FROM USERS;

exec SP_NEW_ACCOUNT(2,105.50,1005);
COMMIT;
SELECT * FROM ACCOUNTS;
exec SP_MAKE_WITHDRAWAL(1010,3);
commit;

SELECT * FROM USERS;

UPDATE USERS SET SUPER_USER=1 WHERE USER_ID=1028;
*/
/*
CREATE OR REPLACE TRIGGER t_balance_changed
AFTER UPDATE ON ACCOUNTS
    DECLARE this_time TIMESTAMP;
BEGIN
    SELECT CURRENT_TIMESTAMP INTO this_time FROM DUAL;
    INSERT INTO ACCOUNT_TRANSACTION 
    (Transaction_ID,USER_ID,ACCOUNT_ID,DATE_OF_TRANSACTION,TRANSACTION_DESC)
    SELECT account_tx_seq.nextval,USER_ID,ACCOUNT_ID, this_time, 'Balance changed'
    FROM ACCOUNTS WHERE ACCOUNT_ID = ACCOUNTID AND USER_ID = USERID;
END;

DROP TRIGGER T_BALANCE_CHANGED;
DROP TRIGGER T_CUSTOMER_DELETED;
DROP TRIGGER T_USER_DELETED;
commit;
SELECT * FROM ACCOUNT_TRANSACTION;
SELECT * FROM ACCOUNTS;*/