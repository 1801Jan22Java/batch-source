-- Bank users table
CREATE TABLE BANK_USERS(
USERID INT,
USERNAME VARCHAR(255),
USERPASS VARCHAR(255),
PRIMARY KEY (USERID)
);

-- Sequence for user IDs
CREATE SEQUENCE USER_SEQUENCE
MINVALUE 0
START WITH 1000
INCREMENT BY 1;

--Create bank account table
CREATE TABLE BANK_ACCOUNT(
ACCOUNTID INT,
ACCOUNTNAME VARCHAR(255),
AMOUNT FLOAT,
PRIMARY KEY (ACCOUNTID)
);

--DROP SEQUENCE ACCOUNT_SEQUENCE;

--Account key sequence
CREATE SEQUENCE ACCOUNT_SEQUENCE
MINVALUE 0
START WITH 1000
INCREMENT BY 1;

--Linking sequence (could(should) be replaced with a couple triggers)
CREATE SEQUENCE ACCOUNTLINK_SEQUENCE
MINVALUE 0
START WITH 1000
INCREMENT BY 1;

CREATE SEQUENCE USERACCOUNT_SEQUENCE
MINVALUE 0
START WITH 1000
INCREMENT BY 1;

CREATE SEQUENCE SUPERUSER_SEQUENCE
MINVALUE 0
START WITH 1000
INCREMENT BY 1;

--This table links together the users and accounts
--Multiple users can access a single account
CREATE TABLE BANK_USERACCOUNTS(
USERACCOUNTID INT,
ACCOUNTID INT,
USERID INT,
PRIMARY KEY (USERACCOUNTID)
);

-- Setup our foreign keys
ALTER TABLE BANK_USERACCOUNTS ADD CONSTRAINT FK_ACCOUNTID
    FOREIGN KEY (ACCOUNTID) REFERENCES BANK_ACCOUNT(ACCOUNTID);
    
ALTER TABLE BANK_USERACCOUNTS ADD CONSTRAINT FK_USERID
    FOREIGN KEY (USERID) REFERENCES BANK_USERS(USERID);
    
--Super user modification is ONLY USED HERE NOT IN THE JAVA PROGRAM
CREATE TABLE BANK_SUPERUSERS(
SUPERUSERID INT,
USERID INT,
PRIMARY KEY (SUPERUSERID)
);   

-- More foreign keys
ALTER TABLE BANK_SUPERUSERS ADD CONSTRAINT FK_SUSERID
    FOREIGN KEY (USERID) REFERENCES BANK_USERS(USERID);
    
INSERT INTO BANK_USERS VALUES(1,'RickyBobby','talladega');
INSERT INTO BANK_SUPERUSERS VALUES(1, 1); --1 is RickyBobby, the obvious choice for a superuser

--Test query for the linking of users and accounts
SELECT * FROM BANK_ACCOUNT 
INNER JOIN BANK_USERACCOUNTS 
ON BANK_ACCOUNT.ACCOUNTID=BANK_USERACCOUNTS.ACCOUNTID 
WHERE BANK_USERACCOUNTS.USERID = 1000;

--More test queries for parts of other important queries
SELECT * FROM BANK_USERS WHERE USERNAME='joshBrandl';

SELECT * FROM BANK_USERS WHERE USERPASS IS NOT NULL;

--DELETE FROM BANK_USERACCOUNTS WHERE ACCOUNTID=?"

--Procedure for handling the deletion (nullification) of bank accounts
--Account passwords are nulled instead of rrow being removed for record keeping and security reasons
CREATE OR REPLACE PROCEDURE DELETE_BANK_ACCOUNT
(ACCOUNT_ID INT)
IS
BEGIN
    DELETE FROM BANK_USERACCOUNTS WHERE ACCOUNTID=ACCOUNT_ID;
    DELETE FROM BANK_ACCOUNT WHERE ACCOUNTID=ACCOUNT_ID;
    
END;
/

-- Table to keep track of bank transactions (deposits and withdrawls)
CREATE TABLE BANK_TRANSACTIONS(
TRANSACTIONID INT,
USERID INT,
ACCOUNTID INT,
OLD_BAL FLOAT,
NEW_BAL FLOAT,
TIME_STAMP TIMESTAMP,
PRIMARY KEY (TRANSACTIONID)
);

--Foreign key for this table
ALTER TABLE BANK_TRANSACTIONS ADD CONSTRAINT FK_TACCOUNTID
    FOREIGN KEY (ACCOUNTID) REFERENCES BANK_ACCOUNT(ACCOUNTID);

--The sequenece for the key to this table
CREATE SEQUENCE TRANSACTION_SEQUENCE
MINVALUE 0
START WITH 0
INCREMENT BY 1;

-- Trigger for the sequence, this is how it should have been done for the other tables
CREATE OR REPLACE TRIGGER BANK_TRANSACTION
    AFTER UPDATE ON BANK_ACCOUNT
    FOR EACH ROW
    BEGIN
        INSERT INTO BANK_TRANSACTIONS VALUES(TRANSACTION_SEQUENCE.NEXTVAL, 0, :new.ACCOUNTID, :old.AMOUNT, :new.AMOUNT, CURRENT_TIMESTAMP);
    END;
/